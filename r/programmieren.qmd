# Basics Programmieren {#sec-r-programmieren}

## Weshalb Programmieren als Psycholog:in?

Wir lernen in diesem Kurs das Programmieren nicht im luftleeren Raum, sondern anhand von Aufgaben und Problemen, die sich uns als Psycholog:innen stellen.

> "Psychologie erforscht das menschliche Erleben und Verhalten – sie untersucht, beschreibt und erklärt psychische Phänomene wie Gefühle, Entscheidungen, Gedanken, Motivationen oder Erinnerungen."^[[https://www.unilu.ch/studium/studienangebot/bachelor/vpf/psychologie/](https://www.unilu.ch/studium/studienangebot/bachelor/vpf/psychologie/)]

Die Psychologie ist eine empirische Wissenschaft. Das bedeutet, die Erkenntnisse der Wissenschaftlichen Psychologie werden zu einem grossen Teil durch das Erheben und Auswerten von Daten gewonnen. Hierfür brauchen wir nicht nur Wissen darüber, wie Daten systematisch erhoben werden können, sondern auch darüber, wie diese Daten verarbeitet, zusammengefasst, interpretiert und kommuniziert werden können.

> Wenn wir Daten verstehen wollen, müssen wir mit ihnen sprechen. Und eine Sprache, die uns dies ermöglicht, ist R.

Die Methodenausbildung befähigt dazu 

- die Qualität von Studien und einzelnen Aussagen kritisch zu hinterfragen und einzuordnen.
- zu beurteilen, ob erhobene Daten, das statistische Verfahren und die wissenschaftliche Aussage zueinander passen.
- Daten selbstständig zu erheben und zu analysieren, um wissenschaftliche Aussagen machen zu können zu den interessierenden Fragen in allen Feldern der Psychologie.

Deshalb starten wir zu Beginn mit möglichst wenig trockenem Wissen, sondern erarbeiten uns das Programmierwissen nach und nach anhand von Beispielen aus der psychologischen Praxis.
Sie müssen, um mit Daten zu sprechen, keine Programmiersprache perfekt beherrschen, sondern nur genügend gut, um die Informationen zu erhalten, die Sie interessieren.


## Wichtige Aspekte von Programmiersprachen

R ist eine Programmiersprache, wie beispielsweise auch Python, C, Java, MATLAB, etc. 
Wie gesprochene Sprachen (z.B. Englisch und Deutsch) haben Programmiersprachen andere Wörter aber ähnliche Strukturen. (Wenn Sie _R_ lernen, wird es Ihnen also auch einfacher fallen andere Programmiersprachen zu erlernen.)
Zudem erlernt man durch das Programmieren, grössere Arbeitsschritte in kleinere aufzuteilen, sich gezielt im Internet Hilfe zu suchen, Lösungen zu überprüfen und logisch vorzugehen.

- Grundsätzlich besteht Code aus _Text_ welcher _ausgeführt_ wird.

- Anders als bei gesprochenen Sprachen ist beim Programmieren fehlerfreier Text sehr wichtig. Wenn ein Funktionsname falsch geschrieben oder ein falsches Zeichen verwendet wird, kann der Code nicht ausgeführt werden oder falsche Ergebnisse produzieren. Ein häufiger Fehler ist auch, dass eine Klammer geöffnet `(` aber nicht wieder geschlossen `)` wird. Im Gegensatz zu anderen Programmiersprachen sind in _R_ Einrückungen oder Leerzeichen irrelevant und werden nicht beachtet.

- Programmiersprachen enthalten verschiedene Bausteine wie Funktionen, Argumente, Abläufe (z.B. *loops*/Schleifen), Bedingungen (*conditional statements*), Objekte (*variables*), etc., die in einer bestimmten Form/Reihenfolge aufgeschrieben werden. Sobald das Grundprinzip dieser Bausteine verinnerlicht wurde, wird die Anwendung von Programmiersprachen sehr viel einfacher. Dieses Wissen kann auch auf andere Programmiersprachen übertragen werden.

- Indem man sich an gewisse Konventionen bei der Speicherung von Code und Variablen hält, bleibt ein Skript übersichtlich und der Code ist leichter lesbar. In diesem Kurs verwenden wir R mit *R-Projects* und *Notebooks*, so dass die Datei-Struktur immer ähnlich aufgebaut ist. Zudem benennen wir Variablen nach bestimmten Regeln, um den Überblick zu behalten.

- Zuletzt ist es wichtig zu wissen, was zu tun ist, wenn der Code nicht läuft. _Debugging_ bedeutet, dass man sich auf die Fehlersuche macht, weshalb z.B. ein Code nicht ausgeführt werden kann. Niemand schreibt fehlerfreien Code, oft entsteht Code durch *trial and error*. Fehlermeldungen sind also kein Grund zur Sorge, sondern ein wichtiger Bestandteil der Arbeit mit _R_ und geben Hinweise, wo und wie man den Code anpassen muss. 


## Bausteine von Programmiersprachen

In diesem Unterkapitel werden die wichtigsten Bausteine von Programmiersprachen zusammengefasst.
Es ist daher ok, wenn Sie zu Beginn nicht alles verstehen oder anwenden können.
Sie können dieses Kapitel nutzen, um nachzuschlagen wie etwas funktioniert, sobald wir darauf stossen.


Grundsätzlich gilt: 

> «To understand computations in R, two slogans are helpful: 
Everything that exists is an object. 
Everything that happens is a function call.» J. M. Chambers^[[Chambers, J.M.(2014): Object-Oriented Programming, Functional Programming and R. In: Statistical Science. Band 29, Nr. 2, S. 167–180, https://arxiv.org/abs/1409.3531](https://arxiv.org/abs/1409.3531)]

Es gibt also wichtige Grundbausteine, Objekte und Funktionsaurufe, die etwas mit diesen Objekten tun.

- __Objekte__ können erstellt und benannt, sowie bearbeitet werden. Beispiele dafür sind eine Variable, ein Datensatz.^[Auch Funktionen sind Objekte. Das kann anfangs irritierend wirken, ist aber eigentlich recht logisch. Als Analogie: Auch wenn ein Rechner (Funktion) ein Objekt ist, kann damit gerechnet werden (Funktionsaufruf).]

- __Aufrufen von Funktionen__ lassen etwas passieren. Beispiele dafür ist das Verwenden von mathematischen Operatoren (`sqrt()` berechnet die Wurzel einer Zahl) oder das Aufrufen der Funktion `lm()`, die ein lineares Modell berechnet.

In den folgenden Unterkapiteln wird auf folgende wichtige Bausteine in _R_ eingegangen:

- Packages
- Variablen
- Datensätze
- Mathematische Operatoren
- Logische Operatoren

### Packages

Packages sind Sammlungen von Funktionen, die für das Programmieren genutzt werden können.
Packages können mit der Funktion `install.packages()` installiert und mit der Funktion `library()` geladen werden.

Ein Beispiel für ein Package ist das {tidyverse}. 
Es enthält eine Sammlung von verschiedenen, für _Data Science_ sehr geeigneten Funktionen, welche viele Schritte der Datenverarbeitung ermöglichen und vereinfachen.

<aside>Mehr Informationen zum `tidyverse`finden Sie [hier](https://r4ds.had.co.nz/).</aside>

Das `tidyverse` kann direkt in _R_ heruntergeladen werden:

```{r}
#| eval: FALSE
# Download und installieren des Packages (nur einmal in der Konsole ausführen)
install.packages("tidyverse")
```

Ein _Package_ muss __nur einmal__ heruntergeladen und __installiert__ werden, danach ist es lokal auf dem Computer gespeichert. 
Aber: Jedes Mal wenn _RStudio_ geöffnet wird, müssen _Packages_ wieder neu __geladen__ werden.

```{r}
#| warnings: FALSE
#| errors: FALSE
#| output: FALSE
# Package laden (bei jedem Öffnen von R zu Beginn des Skripts ausführen)
library("tidyverse") 
```

<!-- Wenn nicht das ganze Package geladen werden soll, aber eine Funktion daraus gebraucht wird, kann die Funktion nach dem Package-Name mit `::` aufgerufen werden: `packagename::funktionsname()`. -->

Sobald ein _Package_ installiert ist, können die Funktionen auch verwendet werden ohne, dass das ganze _Package_ mit `library()` geladen wird, indem die Funktion mit dem _Package_-Namen zusammen aufgerufen wird: `packagename::packagefunction()`. Dies macht Sinn, wenn verschiedene _Packages_ dieselben Namen für verschiedene Funktionen nutzen und es so zu Konflikten kommt oder wenn nur eine Funktion aus einem _Package_ verwendet werden soll und alle anderen sowieso nicht gebraucht werden.

```{r}
#| eval: false
# Aufrufen Funktion aus Package ohne Laden
tidyverse::tibble()
```


<!-- ### Packages -->

<!--  -->

<!-- <aside> Zu Beginn der Website wird jeweils angegeben, welche Packages für Sie im Hintergrund schon geladen wurden. </aside> -->

<!-- Wenn ein Package nicht geladen werden soll, aber eine Funktion daraus gebraucht wird, kann die Funktion nach dem Package-Name mit `::` aufgerufen werden: `packagename::funktionsname()`. -->

<!-- ::: {.panel-tabset} -->
<!-- ## {{< fa code >}}&emsp;Konsole -->

<!-- Laden Sie das Package `{ggplot2}`: -->

<!-- ```{webr-r} -->
<!-- library(___) -->

<!-- ``` -->

<!-- ## {{< fa regular helicopter >}}&emsp;Tipp -->

<!-- Geben Sie innerhalb der Klammer den Packagename an (keine Anführungszeichen). -->

<!-- ## {{< fa check >}}&emsp;Lösung -->

<!-- ```{r} -->
<!-- #| eval: false -->

<!-- library(ggplot2) -->
<!-- ``` -->


<!-- ::: -->


### Mathematische Operatoren

_R_ kann als einfacher Rechner verwendet werden, wenn man die Konsole oder die Rechnung in einem _Skript_ / _RNotebook_ ausführt. 

```{r}
1+1-4*2/15
```

Nach Ausführen des Codes wird unter der Konsole das Resultat - der ___Output___ - angezeigt.
Die Zahl in Klammern, also `[1]` beschreibt die Zeilennummer.
Dahinter wird der Output des ausgeführten Codes angezeigt.

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole
Der Code in der _WebR_-Konsole kann gelöscht und durch anderen Code ersetzt werden.
Es können auch andere Operatoren (z.B. `-`, `/` oder `*`) oder Funktionen (wie `sqrt()`) genutzt werden.

```{webr-r}
1+1-4*2/15
```

## {{< fa regular helicopter >}}&emsp;Tipp

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
1+1-4*2/15
```
:::

<aside>
Die _WebR_ Konsole ergibt dieselben Outputs wie in _RStudio_, so kann auf der Website direkt Code geschrieben und ausgeführt werden, der auch in _RStudio_ kopiert werden kann.
Sobald ein grüner Pfeil und `Run Code` erscheint, ist WebR geladen und bereit.
Mit `Run Code` kann der Code in der Konsole *ausgeführt* werden.
</aside>

In dieser Tabelle finden Sie die wichtigsten mathematischen Operatoren.
Am linken Rand wird die Zeilennummer des Codes angegeben analog zu einem _RSkript_ oder _RNotebook_. Diese Zahl kann nicht geändert werden. Sie dient bei langem Code dazu sich zu orientieren oder den Fehler zu finden, wenn einer auftritt.

| Operation                    	|     Operator in Text     	| Operator in R             	| Beispielscode                	|
|------------------------------	|:------------------------:	|---------------------------	|------------------------------	|
| Addition                     	|             +            	| `+`                       	| `3+2`                        	|
| Subtraktion                  	|             -            	| `-`                       	|                              	|
| Multiplikation               	|             *            	| `*`                       	|                              	|
| Division                     	|             /            	| `/`                       	|                              	|
| Potenz                       	|            ^            	| `^`                       	| `3^2`                        	|
| Wurzel                       	|         $$\sqrt{9}$$        	| `sqrt()`                  	| `sqrt(9)`                    	|
| Exponentialfunktion          	|           $$e^2$$           	| `exp()`                   	| `exp(3)`                     	|
| Logarithmus                  	| $$log_{e}, log_{10}, log_{10}10$$ 	| `log()`, `log10()`        	| `log(10)`, `log10(10)`       	|
| Trigonometrische  Funktionen 	| $$cos, sin, tan$$            	| `cos()`, `sin()`, `tan()` 	| `cos(2)`, `sin(2)`, `tan(2)` 	|

: Mathematische Operatoren in R {.hover}

<br>

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole
Geben Sie in die Konsole folgende mathematische Operationen ein:

- $1+1+1$

- $5*5$

- $3*(4+3)$

- $1000/10^2$

- $\sqrt{144}$

- $\sin60$


```{webr-r}

```

## {{< fa regular helicopter >}}&emsp;Tipp

Schauen Sie in der untenstehenden Tabelle _Mathematische Operatoren in R_ nach.

## {{< fa check >}}&emsp;Lösung

```{r}
#| echo: false

1+1+1
5*5
3*(4+3)
1000/(10^2)
sqrt(144)
sin(60)
```

:::
<!-- ### Logische Operatoren -->


<!-- The logical operators are <, <=, >, >=, == for exact equality and != for inequality. In addition -->
<!-- if c1 and c2 are logical expressions, then c1 & c2 is their intersection (“and”), c1 | c2 is their -->
<!-- union (“or”), and !c1 is the negation of c1 -->

### Variablen in R

Objekte können in R erstellt werden indem einer der beiden Zuweisungsoperatoren `=` oder `<-` genutzt wird.
In diesem Kurs arbeiten wir vor allem mit `<-`.^[Der Zuweisungsoperator `<-` zeigt klarer als das `=` auf, dass ein Wert zugewiesen wird und ist daher intuitiver.]
In den meisten Fällen ergibt `=` jedoch dasselbe Ergebnis.

**Vor** dem Zuweisungsoperator steht der Variablenname. 
**Nach** dem Zuweisungsoperator steht der Variablenwert bzw. die -werte.

#### Einfache Variablen: Vektoren

Die simpelsten Objekte in R sind Vektoren. Man kann sich dies vorstellen wie einen Wert (z.B. eine Zelle) oder eine Reihe von Werten (z.B. eine Spalte) einer Exceltabelle. 
Ein Vektor kann keinen, einen oder mehrere Werte enthalten.
Matrizen können mehrere Vektoren desselben Datentyps kombinieren (z.B. mehrere Spalten in einer Exceltabelle). 
Datensätze (`data.frame` oder `tibble`) können Variablen unterschiedlicher Typen kombinieren. 
Es können also Buchstaben und Zahlen gemischt werden.

Eine neue Variable kann mit einem Zuweisungsoperator erstellt werden.

Hier ein paar Beispiele:

```{r}
a <- 5 # Variable namens a mit dem Wert 5
b = 5 # Variable namens b mit dem Wert 5
c <- 6.45 # Variable namens c mit dem Wert 6.45
d <- 5*3 # Variable namens d mit dem Wert ?
```

Für das Erstellen der Variable muss der Code nicht nur geschrieben, sondern auch ausgeführt werden.
Durch das Ausführen wird dem Objektnamen `a` den Wert 5 zugewiesen.
Variablen können abgerufen werden, indem ihr Name eingegeben und ausgeführt wird:

```{r}
a
```

Diese Variable bleibt gespeichert/abrufbar, bis das `Environment` wieder gelöscht wird. Sie kann auch überschrieben werden.

```{r}
a <- 10
a
```

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

1. Erstellen Sie die obigen Variablen `a`,`b`, `c` und `d`. 

2. Rufen Sie die Variablen auf: Was haben Sie für Werte?

```{webr-r}
___ <- ___
```

## {{< fa regular helicopter >}}&emsp;Tipp

Setzen Sie vor dem Pfeil den Variablennamen ein.

Setzen Sie nach dem Pfeil den Variablenwert ein.

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
a <- 5
b <- 5
c <- 6.45
d <- 5*3
```

:::

Wird eine Variable aufgerufen, die nicht existiert, wird die Fehlermeldung `Error: object 'x' not found` ausgegeben. 
Das bedeutet, dass die Variable `x` nicht auffindbar ist und daher nicht angezeigt werden kann. 

```{webr-r}
x
```

Variablen können auch __mehrere Werte__ enthalten. 
Einen Weg mehrere Werte in einer Variable zu speichern ist die Funktion `c()` zu nutzen.^[`c()` ist wie die Plastikumhüllung für sechs Tetrapack Milch. Sie fasst einfach mehrere Werte zusammen und zeigt _R_, dass diese in eine Variable gehören. So können sechs Werte mit einem "Henkel" (Variablennamen) herumgetragen werden. ![`c()`-Funktion](../imgs/columnfunction.png)]
Die Variable `y <- c(23, 45, 34)` enthält die Werte `23`, `45` und `34`.
Nicht numerische Werte, z.B. Wörter, werden jeweils in `"Anführungszeichen"` gesetzt: `z <- c("ja", "nein", "vielleicht")`.

<aside>Faktoren können mit der Funktion `as.factor()` erstellt werden. Wenn z.B. `ja`, `nein` und `vielleicht` als Faktoren gespeichert werden sollen lautet der Code `z <- as.factor(c("ja", "nein", "vielleicht"))`. </aside>

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole
Erstellen Sie eine Variable mit mehreren numerischen Werten und eine Variable mit mehreren Wörtern als Werte.

```{webr-r}
numbers <- c(___)
words <- c(___)
```

## {{< fa regular helicopter >}}&emsp;Tipp

Fügen Sie in die Klammer mehrere Werte ein.
Numerische Werte/Zahlen können einfach eingegeben werden. 
Kategorische Werte/Wörter hingegen müssen in Anführungszeichen (`" "`) gesetzt werden. 

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
numbers <- c(23, 45, 34)
words <- c("ja", "nein", "vielleicht")
```

:::

\sqrt{9}

Variablen können __unterschiedliche Datentypen__ enthalten, z.B. Zahlen oder Wörter.
Der __Variablentyp__ (oder die __Variablenklasse__) entspricht dem zugewiesenen Wert bzw. den zugewiesenen Werten.
Mit der Funktion `class()` kann erfragt werden, welchen Variablentyp eine Variable hat.
In die Klammer wird der Variablennamen, also bspw. `y` eingesetzt.


::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

```{webr-r}
y <- ___
class(y)

```

## {{< fa regular helicopter >}}&emsp;Tipp

Definieren Sie eine Variable `y`.

Fügen Sie in die Klammer nach `class` den Variablennamen ein.

Sie können `y <- ...` der nächsten Aufgabe kopieren und hier einsetzen, um sich den Variablentyp ausgeben zu lassen.

## {{< fa check >}}&emsp;Lösung

```{r}
y <- c(23, 45, 34)
class(y)
```

:::



::: {.callout-note appearance="simple" icon=false}
## {{< fa circle-question >}}&emsp;Quiz: Variablentyp

<br>

Welcher Variablentyp hat die Variable `y`?

*a.*

`y <- c(23, 34, 634, 234, 12, 34)`

`r webexercises::mcq(c("character", answer = "numeric", "factor", "leer"))`

*b.*

`y <- c("hallo", "a", "nein")`

`r webexercises::mcq(c(answer = "character", "numeric", "factor", "leer"))`


*c.*

`y <- 0`

`r webexercises::mcq(c("character",  answer = "numeric", "factor", "leer"))`

*d.*

`y <- NULL`

`r webexercises::mcq(c("character",  "numeric", "factor", answer = "leer"))`

*e.*

`y <- as.factor(c("blue", "red", "yellow"))`

`r webexercises::mcq(c("character",  "numeric", answer = "factor", "leer"))`

:::

<br>


### Datensätze

Objekte können nicht nur einen Vektor enthalten wie oben, sondern können auch ganze Datensätze sein.
Also mehrere aneinandergereihte Vektoren (wie eine Exceltabelle).
Datensätze können unterschiedliche Variablentypen enthalten.

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

Erstellen Sie einen Datensatz mit 3 Variablen:

- Name: `sub`, Werte: `sub-01`, `sub-02`, `sub-03`, `sub-04`
- Alter: `age`, Werte: `43`, `54`, `33`, `29`
- Korrekte Antworten: `accuracy`, Werte: `89`, `77`, `95`, `98`

```{webr-r}
# Erstellen Sie den Datensatz
d <- tibble(sub = c("sub-01", "sub-02", "sub-03", "sub-04"),
            age = c(43, ___, ___, ___),
            ___ = c(89, 77, ___, ___)
            )

```

## {{< fa regular helicopter >}}&emsp;Tipp

Fügen Sie bei allen `___` die fehlenden Werte ein und drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
d <- tibble(sub = c("sub-01", "sub-02", "sub-03", "sub-04"),
            age = c(43, 54, 33, 29),
            accuracy = c(89, 77, 95, 98)
            )
```

:::



Zusammenfassend können Variablen keinen, mehrere oder einen Wert haben.
Sie können unterschiedliche oder identische Datentypen beinhalten.

![](../imgs/objects_variablesmatricesdataframes.png)


<!-- ### Funktionen und Argumente -->

<!-- ### Objekte -->

<!-- ### Workflows: Schleifen und Entscheidungen -->

<!-- ### Debugging und Hilfe -->





### Funktionen und Argumente

Funktionen sind Befehle, die etwas ausführen.
Um dies zu tun, wird der Funktionsname und in den Klammern die Argumente angegeben. 
Bei jeder Funktion ist definiert, ob und wenn ja welche Argumente eingegeben werden müssen. 
Hierbei gibt es Argumente die unbedingt benötigt werden, und solche, die weggelassen werden können, dann werden die Standardeinstellungen genommen.

__Beispiele für Funktionen__

Die Funktion `mean()`berechnet den arithmetischen Mittelwert.
In der Dokumentation (also z.B. durch eingeben von `?mean()` wird angegeben, dass `mean()` mindestens ein Argument benötigt, nämlich ein Objekt mit Zahlen darin: `mean(x, ...)`. 
Um mehrere Zahlen als Objekt zu speichern, wird die `column`-Funktion `c()` verwendet.

```{r}
mean(c(105, 88, 115, 102, 104, 96, 85, 112, 98))
```

Oder wir können mit der Funktion `c()` einen numerischen Vektor erstellen, und dann diesen Vektor als Argument verwenden:

```{r}
# mean with a numeric vector
iq <- c(105, 88, 115, 102, 104, 96, 85, 112, 98)
mean(iq)
```


::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

Berechnen Sie den arithmetischen Mittelwert von 

346, 56, 23, 85, 234, 8, 4, 812, 34

```{webr-r}

```

## {{< fa regular helicopter >}}&emsp;Tipp

Erstellen Sie zuerst mit `c()` einen numerischen Vektor.

Rufen Sie dann die Funktion `mean()` mit diesem Vektor als Argument auf.

## {{< fa check >}}&emsp;Lösung

```{r}
num_var <- c(346, 56, 23, 85, 234, 8, 4, 812, 34)
mean(num_var)
```


:::

Wichtige Funktionen für statistische Berechnungen:

- `mean()`: berechnet den Mittelwert
- `median()`: berechnet den Median
- `sd()`: berechnet die Standardabweichung^[Hier wird die geschätzte Standardabweichung berechnet mit $n-1$]
- `var()`: berechnet die Varianz^[Hier wird die geschätzte Varianz berechnet mit $n-1$]
- `sum()`: berechnet die Summe
- `min()`: extrahiert den kleinsten Wert
- `max()`: extrahiert den grössten Wert
- `scale()`: z-transformiert die Daten

::: {.callout-note appearance="simple" icon=false}
## {{< fa circle-question >}}&emsp;Quiz: Funktionen nutzen

<br>

Dieser Code erstellt einen Variable mit 100 fiktiven IQ-Messungen.

```{r}
data_iq <- rnorm(100, mean = 100, sd = 15) # diese Zeile generiert 100 Messungen
```

Verwenden Sie die Konsole, um die Variable `data_iq` zu erstellen mit dem obigen Code.
Danach können Sie die Funktionen von oben nutzen um das Quiz zu beantworten.


```{webr-r}
___ # fügen Sie hier den Code zum Generieren der Daten ein
mean(data_iq)
median(___)


```


<br>

__a.__ Was ist der Mittelwert der Daten?

`r webexercises::mcq(c("ca. 50", answer = "ca. 100", "ca. 1000"))`

__b.__ Was ist der Median der Daten?

`r webexercises::mcq(c("ca. 10", "ca. 50", answer = "ca. 100"))`

__c.__ Was ist die Standardabweichung der Daten?

`r webexercises::mcq(c(answer = "ca. 15", "ca. 50", "ca. 100"))`

__d.__ Was ist die der maximale Wert? (keine Quiz-Antwort möglich da Werte unterschiedlich) 

__e.__ Was ist der minimale Wert? (keine Quiz-Antwort möglich da Werte unterschiedlich) 

:::

<aside>
Alles hinter dem `#` wird nicht ausgeführt, es dient als Kommentar.
So kann beschrieben werden, was eine Zeile Code genau macht, ohne dass diese mit dem Code interferiert.
</aside>


## Data wrangling

Datensätze können in R einfach dargestellt und zusammengefasst werden.

Mit der Funktion `glimpse()` kann der Datensatz angeschaut werden

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

Schauen Sie sich den oben erstellten Datensatz an.

```{webr-r}
glimpse(d)
```

## {{< fa regular helicopter >}}&emsp;Tipp

Falls `d` nicht angezeigt werden kann, erscheint die Fehlermeldung `Error: object 'd' not found`. Scrollen Sie nach oben und erstellen Sie den Datensatz `d`unter __3. Objekte in R__.

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
glimpse(d)
```
:::


Zum Üben gibt es in R Datensätze, die immer verfügbar sind, z.B. `cars`.
In diesem Datensatz von 1920 werden verschiedene Autos und ihre Eigenschaften beschrieben.

Mit `summary()` kann der Datensatz zusammengefasst werden, es werden automatisch die minimalen und maximalen Werte, Mittelwerte, etc. ausgegeben.

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

Schauen Sie sich die Zusammenfassung von `cars` an:

```{webr-r}
___(cars)
```

## {{< fa regular helicopter >}}&emsp;Tipp

Verwenden Sie die Funktion `summary()`.

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
summary(cars)
```

:::

Mit dem Operator `$` kann eine einzelne Variable aus dem Datensatz ausgewählt werden.

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

Schauen Sie sich die einzelnen Variablen von `cars` an.

```{webr-r}
cars$___
```

## {{< fa regular helicopter >}}&emsp;Tipp

Wählen Sie aus den oben angezeigten Variablen eine aus und setzen Sie sie nach dem `$` ein.

Beispiel: `speed` oder `dist`.

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
cars$speed
```

oder

```{r}
cars$dist
```
:::


## Datenvisualisieren

Um Grafiken zu erstellen gibt es in R einfache Befehle, wie

- `plot()`
- `hist()`
- `boxplot()`

<aside>Komplexere und grafisch ansprechendere Plots können mit dem Package `{ggplot2}` erstellt werden.
[Cheatsheet für Interessierte](https://github.com/rstudio/cheatsheets/blob/main/data-visualization.pdf)</aside>

In die Grafikfunktionen können teilweise ganze Datensätze als Argument eingegeben werden. Meistens brauchen die Funktionen aber die genauen Variablen, die geplottet werden sollen als Argumente. Die einzelnen Variablen können mit dem `$` spezifiziert werden (z.B. `cars$speed`).

### Scatterplot

Die Funktion `plot()` macht einen Scatterplot, zeichnet also immer die ersten beiden Werte zweier Variablen als Punkt.
Dann die zweiten zwei Werte, usw.

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

```{webr-r}
plot(___)
```

## {{< fa regular helicopter >}}&emsp;Tipp

Setzen Sie den Namen des Datensatzes (z.B.`cars`) ein.

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
plot(cars)
```
:::


### Histogramme

Die Funktion `hist()` erstellt ein Histogramm.
Dafür wird nur eine Variable benötigt.
Es wird die Häufigkeit eines Werts in dieser Variable abgetragen.

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

```{webr-r}
hist(___$___)
```

## {{< fa regular helicopter >}}&emsp;Tipp

Setzen Sie den Namen des Datensatzes (z.B.`cars`) ein.
Setzen Sie hinter dem `$` einen Variablennamen ein.

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
hist(cars$speed)
```
:::


### Boxplots

Die Funktion `boxplot()` erstellt ein Boxplot, mit Median und der 1. und 3. Quartile.
Dafür wird nur eine Variable benötigt.
Es kann aber auch ein Datensatz mit mehreren Variablen eingegeben werden.
Dann werden mehrere Boxen geplottet.

::: {.panel-tabset}
## {{< fa code >}}&emsp;Konsole

```{webr-r}
boxplot(___)
```

## {{< fa regular helicopter >}}&emsp;Tipp

Setzen Sie den Namen des Datensatzes (z.B.`cars`) ein.
Setzen Sie hinter dem `$` einen Variablennamen ein um nur eine Variable zu plotten.

Drücken Sie `Run Code`.

## {{< fa check >}}&emsp;Lösung

```{r}
boxplot(cars)
```
:::
