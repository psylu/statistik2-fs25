[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Datenanalyse mit R",
    "section": "",
    "text": "Überblick\nDiese Website enthält ein Online-Skript begleitend zur Vorlesung Statistik 2 (FS 2025) des Bachelorstudiums Psychologie (VPF) an der Universität Luzern.\nInhalt:\nZu Beginn einige wichtige Informationen zum Arbeiten mit der Website:\nTextbausteine dieser Website\nUm das Arbeiten mit dem Skript zu erleichten, enthält dieses verschiedene Bausteine, die unterschiedliche Funktionen haben:\nText\nDies ist ein Text inkl. mathematischer Formulierungen: \\(\\alpha = 5\\).\nCode\nCode ist Text, welcher in R ausgeführt werden kann. Wenn ein #-Zeichen davor steht, ist der Text “auskommentiert”, das bedeutet, dass R ihn nicht liest/ausführt.\n# Dies ist ein Kommentar, also auskommentierter Text. Er wird nicht ausgeführt.\n# Unten eine Zeile Code (ausführbarer Text):\nalpha = 5\nInfo-Blöcke\nInfo-Blöcke beinhalten Informationen, Aufgaben oder Lösungen.\nWebR-Konsolen\nIn den WebR-Blöcken können Sie direkt in Ihrem Browser Code eingeben und ausführen. Sie können den Code aus diesen Blöcken in R ebenfalls ausführen.",
    "crumbs": [
      "Überblick"
    ]
  },
  {
    "objectID": "index.html#weiteres",
    "href": "index.html#weiteres",
    "title": "Datenanalyse mit R",
    "section": "Weiteres",
    "text": "Weiteres\nTasten werden wie folgt beschrieben: Drücken Sie Ctrl-CCtrl-C um ausgewählten Code zu kopieren und Ctrl-VCtrl-V um ihn wieder einzufügen.",
    "crumbs": [
      "Überblick"
    ]
  },
  {
    "objectID": "r/installation.html",
    "href": "r/installation.html",
    "title": "1  Installation",
    "section": "",
    "text": "1.1 Step-by-Step Installation für Windows",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "r/installation.html#sec-windows",
    "href": "r/installation.html#sec-windows",
    "title": "1  Installation",
    "section": "",
    "text": "1.1.1 Installation von R\nÖffnen Sie die Installations-Website. Wählen Sie Download R for Windows, um die neuste Version von R (4.4.2 Pile of Leaves) zu installieren.\n\n\n\n\n\n\nFigure 1.1: Startseite für die Installation von R und RStudio\n\n\n\nLaden Sie unter install R for the first time die Installationsdatei herunter.\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1.2: Installation von R: Auswahl des Betriebssystems\n\n\n\n\n\n\n\n\n\n\n\n\n\nFigure 1.3: Installation von R für Windows: Auswahl der R Version\n\n\n\n\n\n\nKlicken Sie auf Download R-4.4.2 for Windows.\n\n\n\n\n\n\nFigure 1.4: Installation von R für Windows: Downloadlink\n\n\n\nÖffnen Sie die Installationsdatei (oft im Ordner Downloads zu finden) und folgen Sie den Anweisungen. Falls untenstehend nicht anders erwähnt, behalten Sie die Standardeinstellungen bei.\n\nUnter_Select Setup Language_ wählen Sie am besten English als Sprache. Die englische Version macht es leichter im Internet Hilfe zu finden.\n\n\n\n\n\n\n\nFigure 1.5: Installation von R für Windows: Englisch\n\n\n\n\nAm besten speichern Sie R in einem Ordner auf dem Laufwerk C: ab. Hierfür benötigen Sie Admin-Rechte.\n\n\n\n\n\n\n\nFigure 1.6: Installation von R für Windows: Wählen des Speicherorts\n\n\n\nSobald das untenstehende Fenster erscheint, haben Sie R erfolgreich installiert.\n\n\n\n\n\n\nFigure 1.7: Installation von R für Windows: Erfolgreiche Installation\n\n\n\n\n\n1.1.2 Installation von RStudio\nWählen Sie Download RStudio Desktop for Windows, um die neuste Version von RStudio zu installieren.\n\n\n\n\n\n\nFigure 1.8: Startseite für die Installation von R und RStudio\n\n\n\nÖffnen Sie die Installationsdatei (oft im Ordner Downloads zu finden) und folgen Sie den Anweisungen. Falls untenstehend nicht anders erwähnt, behalten Sie die Standardeinstellungen bei.\nWenn Sie R und RStudio installiert haben, fahren Sie hier fort.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "r/installation.html#sec-macos",
    "href": "r/installation.html#sec-macos",
    "title": "1  Installation",
    "section": "1.2 Step-by-Step Installation für MacOS",
    "text": "1.2 Step-by-Step Installation für MacOS\n\n1.2.1 Installation von R\nÖffnen Sie die Installations-Website. Wählen Sie Download R for macOS, um die neuste Version von R (4.2.2 “Pile of Leaves”) zu installieren.\n\n\n\n\n\n\nFigure 1.9: Startseite für die Installation von R und RStudio\n\n\n\nLaden Sie die zu Ihrer Version von macOS passende Installationsdatei herunter. Beachten Sie, dass es zwei Versionen gibt. In der Regel gibt es eine Fehlermeldung, falls Sie einen Intel Prozessor (ältere Mac-Modelle, ca. vor 2021) haben und daher nicht die obere Version verwenden können.\n\n\n\n\n\n\nFigure 1.10: Installation von R für macOS: Downloadlink\n\n\n\nÖffnen Sie die Installationsdatei (oft im Ordner Downloads zu finden) und folgen Sie den Anweisungen. Falls die Auswahl erscheint, wählen Sie English als Sprache. Die englische Version macht es leichter im Internet Hilfe zu finden. Falls untenstehend nicht anders erwähnt, behalten Sie die Standardeinstellungen bei.\n\nSpeichern Sie R auf der Macintosh HD ab. In der Regel entspricht dies den Standardeinstellung und Sie müssen nichts anpassen. Sie benötigen hierfür Admin-Rechte.\n\n\n\n\n\n\n\nFigure 1.11: Installation von R für macOS: Startfenster\n\n\n\nSobald das untenstehende Fenster erscheint, haben Sie R erfolgreich installiert.\n\n\n\n\n\n\nFigure 1.12: Installation von R für macOS: Erfolgreiche Installation\n\n\n\n\n\n1.2.2 Installation von RStudio\nWählen Sie Download RStudio Desktop for MacOS, um die neuste Version von RStudio zu installieren.\n\n\n\n\n\n\nFigure 1.13: Startseite für die Installation von R und RStudio\n\n\n\nÖffnen Sie die Installationsdatei (oft im Ordner Downloads zu finden) und folgen Sie den Anweisungen. Falls untenstehend nicht anders erwähnt, behalten Sie die Standardeinstellungen bei.\nWenn Sie R und RStudio installiert haben, fahren Sie hier fort.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "r/installation.html#sec-setuprstudio",
    "href": "r/installation.html#sec-setuprstudio",
    "title": "1  Installation",
    "section": "1.3 Einrichten von RStudio",
    "text": "1.3 Einrichten von RStudio\nIn einem nächsten Schritt können wir RStudio konfigurieren, so dass wir gut damit arbeiten können.\n\n1.3.1 Verändern der Grundeinstellungen\nUnter Tools &gt; Global Options ... finden Sie viele Anpassungsmöglichkeiten für Ihre RStudio-Konfiguration.\nFolgende Anpassung empfehlen wir, weil dies hilft zukünftige Fehler zu vermeiden. Entfernen Sie die beiden Haken bei den eingefärbten Kästchen und wählen Sie die Option Never.\n\n\n\n\n\n\nFigure 1.14: Einrichten RStudio: Speicheroptionen\n\n\n\nWeiter können Sie hier beispielsweise unter Appereance die Farben und Schriftarten verändern.\n\n\n1.3.2 Informationen zu Ihrem Setup\nUm zu erfahren, wie Ihr installiertes Setup aussieht, können Sie folgende Befehle nutzen.\n\n# Informationen über das Betriebssystem\nSys.info()\n\n# Informationen über die R Version\nR.version\n\n# Informationen über die RStudio Version\nRStudio.Version()\n\nDiese Informationen sind unter Umständen sehr nützlich, wenn es ums Debugging/Beheben von Fehler geht.\n\n\n1.3.3 Speicherort der Packages\nFühren Sie folgenden Code in der Konsole aus, um zu erfahren in welchen Ordner RStudio Packages herunterlädt.\n\n.libPaths()",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "r/installation.html#faq-installation",
    "href": "r/installation.html#faq-installation",
    "title": "1  Installation",
    "section": "1.4 FAQ Installation",
    "text": "1.4 FAQ Installation\nHier werden häufige Fragen beantwortet.\nZurzeit noch keine Fragen und Antworten vorhanden.\n\n\n\n\n\n\nHilfreiche Informationen und Anleitungen zur Installation\n\n\n\n\nPsyTeachR Website: Ausführliche Installationsanweisungen inkl. Screenshots und Videoanweisung (in Englisch).",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "r/installation.html#footnotes",
    "href": "r/installation.html#footnotes",
    "title": "1  Installation",
    "section": "",
    "text": "Sie können R und RStudio selbstverständlich auch mit Linux installieren. Wir gehen in dieser Veranstaltung davon aus, dass Sie dies ohne zusätzliche Anleitung ausführen können. Für allfällige linuxspezifische Probleme können wir nur in begrenztem Rahmen Hilfe anbieten. Falls Sie die Expertise und Motivation haben eine Step-by-Step Anleitung für Linux zu schreiben, dürfen Sie sich gerne bei uns melden.↩︎",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Installation</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html",
    "href": "r/rrstudio.html",
    "title": "2  Basics R und RStudio",
    "section": "",
    "text": "2.1 R, RStudio und WebR\nR ist eine leistungsstarke Programmiersprache und eine Open-Source-Softwareumgebung. Sie wird in der Forschung für die Datenverarbeitung, statistische Datenanalyse und Datenvisualisierung eingesetzt. R wird von Forschenden und Data Scientists weltweit verwendet, da eine breite Sammlung an Erweiterungen (Packages) zugänglich ist. Dadurch, dass diese Packages kontinuierlich weiterentwickelt und neue Packages erstellt werden, bietet R umfangreiche “state of the art” Funktionen. R kann für einfache Datenanalysen, wie auch für komplexe statistische Modelle und machine learning genutzt werden.\nRStudio ist eine integrierte Entwicklungsumgebung (IDE) für die Programmiersprache R, die den Umgang mit R vereinfacht und benutzerfreundlicher gestaltet. In RStudio kann Code geschrieben, ausgeführt und gespeichert werden. RStudio integriert Funktionen wie eine Konsole, ein Skriptfenster, eine Umgebung zur Verwaltung von Variablen und eine Historie der ausgeführten Befehle.\nWebR ermöglicht das Verwenden von R mit einem Browser, z.B. auf der Kurswebsite.\nArbeiten in R und RStudio eignet sich ideal für Datenverarbeitung, -analyse und -visualisierung aufgrund folgender Vorteile:",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html#r-rstudio-und-webr",
    "href": "r/rrstudio.html#r-rstudio-und-webr",
    "title": "2  Basics R und RStudio",
    "section": "",
    "text": "Genauere Informationen zu R in deutsch und englisch.\n\n\n\n\n\nleistungsstarke Funktionen wie {tidyverse} und {ggplot2} für das Einlesen, Bearbeiten, Zusammenfassen und Visualisieren von Datensätzen\nReproduzierbarkeit des Codes und wiederverwendbare sowie nachvollziehbare Analysen ermöglicht durch abspeicherbare und gut kommentierbare Skripte\nFlexibilität durch eine grosse Auswahl von R-Packages auf CRAN und die Möglichkeit, eigene Funktionen zu erstellen\nAktualität durch ständige Updates von R und R-Packages mit modernen Analysefunktionen\nZugänglichkeit: kostenlos und Open-Source\nSupport durch aktive Community mit schneller Hilfe",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html#programmierumgebung-rstudio",
    "href": "r/rrstudio.html#programmierumgebung-rstudio",
    "title": "2  Basics R und RStudio",
    "section": "2.2 Programmierumgebung RStudio",
    "text": "2.2 Programmierumgebung RStudio\nWenn Sie RStudio öffnen, sehen Sie die Standardansicht. Links finden Sie die Konsole. Sobald Sie ein Code-File öffnen, erscheint dieses links oben.\n\nSkript: In einem Skript können Sie Code schreiben und ausführen. Es können verschiedene Code-Files geöffnet werden, z.B. RSkript und RNotebooks. Wenn Sie einen Datensatz anschauen, erscheint dieser auch in diesem Quadrant.\nKonsole: Hier können Sie direkt Code eingeben und ausführen.\nUmgebung: Hier finden Sie gespeicherte Objekte (z.B. Variablen).\nArbeitsverzeichnis, Plots, Packages, Help, …: Hier finden Sie diverse hilfreiche Informationen wie z.B. die Ordnerstruktur mit der Sie aktuell arbeiten (working directory), die Anzeige von Plots, welche Packages installiert und geladen sind, Hilfe zu den einzelnen Funktionen, u.v.m.\n\n\n\nBitte verändern Sie zu Beginn diese Ansicht nicht, denn wir werden der Einfachheit halber jeweils auf Quadranten hinweisen (z.B. Sie finden etwas im “linken oberen Quadranten”). Wenn Sie die Fenster umstellen, wird diese Angabe nicht mehr zu Ihrer Konfiguration passen. Sobald Sie sich sicher fühlen, können Sie RStudio Ihre Bedürfnissen anpassen.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html#sec-rprojects",
    "href": "r/rrstudio.html#sec-rprojects",
    "title": "2  Basics R und RStudio",
    "section": "2.3 RProjekte",
    "text": "2.3 RProjekte\nIn RStudio gibt es die Möglichkeit mit RProjekten zu arbeiten. Dies gibt Ihnen die Möglichkeit Ihren Code in Projekte zu strukturieren. Ein Projekt ist eine Einheit, in der Sie Daten und Analysecode bündeln möchten.\n\nWir werden in den Übungen jeweils mit Projekten arbeiten.\n\nRProjekte haben zwei grosse Vorteile, die uns das Arbeiten in RStudio vereinfachen:\n1. RProjekte sammeln zusammengehörige Daten und Code in einem Ordner. So behalten Sie den Überblick, wo der Code für dieses Projekt zu finden ist. Sobald Sie an etwas Neuem arbeiten, erstellen Sie einfach ein neues Projekt.\n2. RProjekte ermöglichen ein stabiles working directory.\nDort wo das RProjekt abgelegt ist, beginnt R zu suchen, wenn Sie einen Pfad eingeben. Das hat zur Folge, dass innerhalb eines RProjekt-Ordners die Pfade immer gleich bleiben, auch wenn Sie den Ordner an einen anderen Ort oder sogar auch einen anderen Computer verschieben. Ausserdem sind die Pfade oft viel kürzer.\n\n# Einlesen Daten ausserhalb eines Projekts\nd_ohne_projekt &lt;- read.csv(\"C://User/nameName/Ordner/Unterordner/Unterunterordner/data/daten.csv\")\n\n# Einlesen Daten aus dem Ordner data innerhalb eines Projekts\nd_mit_projekt &lt;- read.csv(\"data/daten.csv\")\n\n\n\n\n\n\n\nProjekt-Ordner\n\n\n\n\n\nÜberlegen Sie zu Beginn gut, wo Sie Ihre Projekte abspeichern möchten.\nErstellen Sie dort einen RProjects-Ordner.\nSpeichern Sie alle RProjekte immer in diesem Ordner ab. So behalten Sie den Überblick.\n\n\n\n\n2.3.1 RProjekt erstellen\nUnter File &gt; New Project kann ein neues RProjekt erstellt werden.\n Es empfiehlt sich bei RProjekten eine Einstellungsänderung (Tools&gt; Project Options...) vorzunehmen, so dass die aktuell gespeicherten Variablen bei jedem Schliessen vom Projekt gelöscht werden. Dies verhindert, dass der aktuelle Code nur aufgrund früherer Speicherung läuft oder das falsche Variablen verwendet werden.\n\n\n\nEinstellungen anpassen für RProject\n\n\n\n\n\n\n\n\nHands-on: Erstellen eines RProjekt erstellen\n\n\n\nErstellen Sie ein neues RProjekt auf Ihrem Computer mit folgenden Schritten:\n\nÖffnen Sie RStudio.\nErstellen Sie ein neues RProjekt.\n\nKlicken Sie dafür auf File &gt; New Project &gt; New Directory &gt; New Project\nBenennen Sie das Project introduction_to_r und speichern Sie es an einem sinnvollen Ort auf Ihrem Computer.\nKlicken Sie auf Create Project.\n\nPassen Sie die Einstellungen unter Tools &gt; Project Options an.\nSchauen Sie sich im rechten unteren Quadranten unter Files das aktuelle working directory an. Was passiert, wenn Sie nun auf Ihrem Computer im Ordnern des RProjekts einen neuen Ordner namens data erstellen?\nWo im Fenster von RStudio finden Sie die Information, ob Sie gerade in einem Projekt arbeiten (und in welchem) oder nicht?\n\n\n\n\n\n\n\n\n\nTipp: Namensgebung für Files und Variablen\n\n\n\nWenn Sie Filenamen auswählen, achten Sie darauf dass diese machine-readable sind:\n\nkeine Lücken (verwenden Sie stattdessen den camelCase, den snake_case oder -)\nkeine ä, ö, ü oder andere Sonderzeichen verwenden",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html#code-schreiben-ausführen-und-speichern",
    "href": "r/rrstudio.html#code-schreiben-ausführen-und-speichern",
    "title": "2  Basics R und RStudio",
    "section": "2.4 Code schreiben, ausführen und speichern",
    "text": "2.4 Code schreiben, ausführen und speichern\nIn RStudio können Sie Code auf verschiedene Arten schreiben, ausführen und speichern.\n1. Code in der Konsole\nDies ist die einfachste Art Code zu schreiben und auszuführen. Sie können die Konsole (linker unterer Quadrant) direkt nutzen. Schreiben Sie in die Konsole Code und drücken Sie EnterEnter, um diesen auszuführen. Code in der Konsole kann nicht gespeichert werden, er geht z.B. beim Schliessen von RStudio verloren. Deshalb eignet sich die Konsole vor allem für schnelles und einmaliges Schreiben von Code. Beispiele dafür sind das Herunterladen von Packages, Ausprobieren von Code und kurzen Berechnungen, welche nicht gespeichert werden müssen.\n2. Code in RSkripts\nWenn ein RProjekt ein Ordner wäre, wären RSkripts die Blätter. Ein neues RSkript kann unter File &gt; New File &gt; R Script erstellt werden. RSkripts sind simpel: Alles was geschrieben wird, kann als Code ausgeführt werden. Mit einer Ausnahmen: Wenn ein # am Anfang der Zeile steht, gilt die Zeile als auskommentiert und wird nicht ausgeführt.\n\n# Das hier ist auskommentierter Text. Er kann nicht als Code ausgeführt werden.\n1+1 # vor dem Hash steht Code, Text hinter dem Hash wird nicht ausgeführt.\n\nUm den Code auszuführen, gibt es zwei Möglichkeiten:\n\nCode anwählen und CtrlCtrl + EnterEnter eingeben\nCode anwählen und oben das Symbol Run drücken\n\n3. Code in RNotebooks:\nEin RNotebooks, RMarkdown- oder Quarto-Files ist praktisch, wenn man Text und Code kombinieren möchte, aber man Text ohne das Auskommentieren (mit dem #) schreiben möchte. Dies ist beispielsweise der Fall, wenn man Details zu einer Analyse zu den Berechnungen hinzu schreiben möchte. Ein RNotebook kann zudem “gerendert” werden, dass heisst, es kann damit ein .html- oder ein .pdf-File erstellt werden. Das ist besonders praktisch, wenn man seine Analyse mit jemanden teilen möchte, der/die kein R benutzt (z.B. bei einer Publikation kann so der Code mit dem Artikel eingereicht werden).\nIn einem RNotebook ist Text grundsätzlich normaler Text. Nur Text in einem Code-Feld (Chunk) wird als Code erkannt. Um den Code auszuführen, gibt es drei Möglichkeiten:\n\nCode anwählen und CtrlCtrl + EnterEnter eingeben\noben rechts beim Codechunk Run drücken\noben rechts beim RNotebook Run drücken",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html#rnotebooks",
    "href": "r/rrstudio.html#rnotebooks",
    "title": "2  Basics R und RStudio",
    "section": "2.5 RNotebooks",
    "text": "2.5 RNotebooks\n\n2.5.1 Erstellen eines neuen RNotebooks\nUnter File &gt; RNotebook kann ein neues RNotebook erstellt werden.\n\n\n\n\n2.5.2 Header\nDer Header beschreibt den Teil zwischen den --- ganz oben im RNotebook. Dort kann der Titel des RNotebooks geändert werden. Zudem wird dort definiert, zu was das RNotebook gerendert wird (z.B. PDF, html, etc.)\n\n\n2.5.3 Codechunks\nCode wird in den Code-Chunks eingegeben und ausgeführt. Ein neuer Code-Chunk wird eingefügt mit der Tastenkombination CtrlCtrl + AltAlt +II / OptionOption +CommandCommand + II oder unter Code &gt; Insert Chunk.1\nUm den Code auszuführen, gibt es drei Möglichkeiten:\n\nCode anwählen und CtrlCtrl + EnterEnter eingeben\noben rechts beim Codechunk Run drücken\noben rechts beim RNotebook Run drücken\n\nCode kann auch auskommentiert werden mit #\n\n\n2.5.4 Textfeld\nAlles was nicht im Header oder in einem Codechunk steht, wird als Text erkannt und nicht als Code ausgeführt. Text kann in R Markdown Files nicht nur geschrieben, sondern auch relativ simpel formatiert werden mit Kapiteln, fett/kursiv Schrift, etc. strukturiert werden.\n\nCheatsheet für RMarkdown zum herunterladen\n\nWeiter können Links, Bilder, Dataoutputs, etc. eingefügt werden. Dies macht dieses Format sehr praktisch für das Erstellen von reproduzierbaren Datenanalysen-Reports.\n\nFür Interessierte: diese ganze Website ist mit Quarto-Files erstellt, die nach demselben Prinzip wie RNotebooks funktionieren. Quarto-Files können ebenfalls in RStudio erstellt und bearbeitet werden.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html#übersicht-dateiformate",
    "href": "r/rrstudio.html#übersicht-dateiformate",
    "title": "2  Basics R und RStudio",
    "section": "2.6 Übersicht Dateiformate",
    "text": "2.6 Übersicht Dateiformate\nIn einem RProjekt-Ordner finden sich nach der Arbeit damit viele Dateien. Die wichtigsten sind:\n\nRProjects: .Rproj\nRSkripts: .R\nRNotebooks: .Rmd\ngerenderte RNotebooks: .html, .pdf, etc.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/rrstudio.html#footnotes",
    "href": "r/rrstudio.html#footnotes",
    "title": "2  Basics R und RStudio",
    "section": "",
    "text": "Der Code-Chunk kann auch selber erstellt werden, indem die Backticks etc. eingegeben werden, aber das ist eher aufwändig.↩︎",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Basics R und RStudio</span>"
    ]
  },
  {
    "objectID": "r/programmieren.html",
    "href": "r/programmieren.html",
    "title": "3  Basics Programmieren",
    "section": "",
    "text": "3.1 Weshalb Programmieren als Psycholog:in?\nWir lernen in diesem Kurs das Programmieren nicht im luftleeren Raum, sondern anhand von Aufgaben und Problemen, die sich uns als Psycholog:innen stellen.\nDie Psychologie ist eine empirische Wissenschaft. Das bedeutet, die Erkenntnisse der Wissenschaftlichen Psychologie werden durch das Erheben und Auswerten von Daten gewonnen. Hierfür brauchen wir nicht nur Wissen darüber, wie Daten systematisch erhoben werden können, sondern auch darüber, wie diese Daten verarbeitet, zusammengefasst, interpretiert und kommuniziert werden können.\nDeshalb starten wir zu Beginn mit möglichst wenig trockenem Wissen, sondern erarbeiten uns das Programmierwissen nach und nach anhand von Beispielen aus der psychologischen Praxis. Sie müssen, um mit Daten zu sprechen, keine Programmiersprache perfekt beherrschen, sondern nur genügend gut, um an die Informationen zu kommen, die Sie interessieren.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics Programmieren</span>"
    ]
  },
  {
    "objectID": "r/programmieren.html#weshalb-programmieren-als-psychologin",
    "href": "r/programmieren.html#weshalb-programmieren-als-psychologin",
    "title": "3  Basics Programmieren",
    "section": "",
    "text": "“Psychologie erforscht das menschliche Erleben und Verhalten – sie untersucht, beschreibt und erklärt psychische Phänomene wie Gefühle, Entscheidungen, Gedanken, Motivationen oder Erinnerungen.”1(https://www.unilu.ch/studium/studienangebot/bachelor/vpf/psychologie/)\n\n\n\nWenn wir Daten verstehen wollen, müssen wir mit ihnen sprechen. Und eine Sprache, die uns dies ermöglicht, ist R.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics Programmieren</span>"
    ]
  },
  {
    "objectID": "r/programmieren.html#wichtige-aspekte-von-programmiersprachen",
    "href": "r/programmieren.html#wichtige-aspekte-von-programmiersprachen",
    "title": "3  Basics Programmieren",
    "section": "3.2 Wichtige Aspekte von Programmiersprachen",
    "text": "3.2 Wichtige Aspekte von Programmiersprachen\nR ist eine Programmiersprache, wie beispielsweise auch Python, C, Java, MATLAB, etc. Wie gesprochene Sprachen (z.B. Englisch und Deutsch) haben Programmiersprachen andere Wörter aber ähnliche Strukturen. (Wenn Sie R lernen, wird es Ihnen also auch einfacher fallen andere Programmiersprachen zu erlernen.) Zudem erlernt man durch das Programmieren, grössere Arbeitsschritte in kleinere aufzuteilen, sich gezielt im Internet Hilfe zu suchen, Lösungen zu überprüfen und logisch vorzugehen.\n\nGrundsätzlich besteht Code aus Text welcher ausgeführt wird.\nAnders als bei gesprochenen Sprachen ist beim Programmieren fehlerfreier Text sehr wichtig. Wenn ein Funktionsname falsch geschrieben oder ein falsches Zeichen verwendet wird, kann der Code nicht ausgeführt werden oder falsche Ergebnisse produzieren. Ein häufiger Fehler ist auch, dass eine Klammer geöffnet ( aber nicht wieder geschlossen ) wird. Im Gegensatz zu anderen Programmiersprachen sind in R Einrückungen oder Leerzeichen irrelevant und werden nicht beachtet.\nProgrammiersprachen enthalten verschiedene Bausteine wie Funktionen, Argumente, Abläufe (z.B. loops/Schleifen), Bedingungen (conditional statements), Objekte (variables), etc., die in einer bestimmten Form/Reihenfolge aufgeschrieben werden. Sobald das Grundprinzip dieser Bausteine verinnerlicht wurde, wird die Anwendung von Programmiersprachen sehr viel einfacher. Dieses Wissen kann auch auf andere Programmiersprachen übertragen werden.\nIndem man sich an gewisse Konventionen bei der Speicherung von Code und Variablen hält, bleibt ein Skript übersichtlich und der Code ist leichter lesbar. In diesem Kurs verwenden wir R mit R-Projects und Notebooks, so dass die Datei-Struktur immer ähnlich aufgebaut ist. Zudem benennen wir Variablen nach bestimmten Regeln, um den Überblick zu behalten.\nZuletzt ist es wichtig zu wissen, was zu tun ist, wenn der Code nicht läuft. Debugging bedeutet, dass man sich auf die Fehlersuche macht, weshalb z.B. ein Code nicht ausgeführt werden kann. Niemand schreibt fehlerfreien Code, oft entsteht Code durch trial and error. Fehlermeldungen sind also kein Grund zur Sorge, sondern ein wichtiger Bestandteil der Arbeit mit R und geben Hinweise, wo und wie man den Code anpassen muss.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics Programmieren</span>"
    ]
  },
  {
    "objectID": "r/programmieren.html#bausteine-von-programmiersprachen",
    "href": "r/programmieren.html#bausteine-von-programmiersprachen",
    "title": "3  Basics Programmieren",
    "section": "3.3 Bausteine von Programmiersprachen",
    "text": "3.3 Bausteine von Programmiersprachen\nIn diesem Unterkapitel werden die wichtigsten Bausteine von Programmiersprachen zusammengefasst. Es ist daher ok, wenn Sie zu Beginn nicht alles verstehen oder anwenden können. Sie können dieses Kapitel nutzen, um nachzuschlagen wie etwas funktioniert, sobald wir darauf stossen.\nGrundsätzlich gilt:\n\n«To understand computations in R, two slogans are helpful: Everything that exists is an object. Everything that happens is a function call.» J. M. Chambers2\n\nEs gibt also wichtige Grundbausteine, Objekte und Funktionsaurufe, die etwas mit diesen Objekten tun.\n\nObjekte können erstellt und benannt, sowie bearbeitet werden. Beispiele dafür sind eine Variable, ein Datensatz.3\nAufrufen von Funktionen lassen etwas passieren. Beispiele dafür ist das Verwenden von mathematischen Operatoren (sqrt() berechnet die Wurzel einer Zahl) oder das Aufrufen der Funktion lm(), die ein lineares Modell berechnet.\n\nIn den folgenden Unterkapiteln wird auf folgende wichtige Bausteine in R eingegangen:\n\nPackages\nVariablen\nDatensätze\nMathematische Operatoren\nLogische Operatoren\n\n\n3.3.1 Packages\nPackages sind Sammlungen von Funktionen, die für das Programmieren genutzt werden können. Packages können mit der Funktion install.packages() installiert und mit der Funktion library() geladen werden.\nEin Beispiel für ein Package ist das {tidyverse}. Es enthält eine Sammlung von verschiedenen, für Data Science sehr geeigneten Funktionen, welche viele Schritte der Datenverarbeitung ermöglichen und vereinfachen.\n\nMehr Informationen zum tidyversefinden Sie hier.\n\nDas tidyverse kann direkt in R heruntergeladen werden:\n\n# Download und installieren des Packages (nur einmal in der Konsole ausführen)\ninstall.packages(\"tidyverse\")\n\nEin Package muss nur einmal heruntergeladen und installiert werden, danach ist es lokal auf dem Computer gespeichert. Aber: Jedes Mal wenn RStudio geöffnet wird, müssen Packages wieder neu geladen werden.\n\n# Package laden (bei jedem Öffnen von R zu Beginn des Skripts ausführen)\nlibrary(\"tidyverse\") \n\n\nSobald ein Package installiert ist, können die Funktionen auch verwendet werden ohne, dass das ganze Package mit library() geladen wird, indem die Funktion mit dem Package-Namen zusammen aufgerufen wird: packagename::packagefunction(). Dies macht Sinn, wenn verschiedene Packages dieselben Namen für verschiedene Funktionen nutzen und es so zu Konflikten kommt oder wenn nur eine Funktion aus einem Package verwendet werden soll und alle anderen sowieso nicht gebraucht werden.\n\n# Aufrufen Funktion aus Package ohne Laden\ntidyverse::tibble()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3.2 Mathematische Operatoren\nR kann als einfacher Rechner verwendet werden, wenn man die Konsole oder die Rechnung in einem Skript / RNotebook ausführt.\n\n1+1-4*2/15\n\n[1] 1.466667\n\n\nNach Ausführen des Codes wird unter der Konsole das Resultat - der Output - angezeigt. Die Zahl in Klammern, also [1] beschreibt die Zeilennummer. Dahinter wird der Output des ausgeführten Codes angezeigt.\n\n Konsole Tipp Lösung\n\n\nDer Code in der WebR-Konsole kann gelöscht und durch anderen Code ersetzt werden. Es können auch andere Operatoren (z.B. -, / oder *) oder Funktionen (wie sqrt) genutzt werden.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDrücken Sie Run Code.\n\n\n\n1+1-4*2/15\n\n[1] 1.466667\n\n\n\n\n\n\nDie WebR Konsole ergibt dieselben Outputs wie in RStudio, so kann auf der Website direkt Code geschrieben und ausgeführt werden, der auch in RStudio kopiert werden kann. Sobald ein grüner Pfeil und Run Code erscheint, ist WebR geladen und bereit. Mit Run Code kann der Code in der Konsole ausgeführt werden.\n\nIn dieser Tabelle finden Sie die wichtigsten mathematischen Operatoren. Am linken Rand wird die Zeilennummer des Codes angegeben analog zu einem RSkript oder RNotebook. Diese Zahl kann nicht geändert werden. Sie dient bei langem Code dazu sich zu orientieren oder den Fehler zu finden, wenn einer auftritt.\n\nMathematische Operatoren in R\n\n\n\n\n\n\n\n\nOperation\nOperator in Text\nOperator in R\nBeispielscode\n\n\n\n\nAddition\n+\n+\n3+2\n\n\nSubtraktion\n-\n-\n\n\n\nMultiplikation\n*\n*\n\n\n\nDivision\n/\n/\n\n\n\nPotenz\n^\n^\n3^2\n\n\nWurzel\n\\[\\sqrt{9}\\]\nsqrt()\nsqrt(9)\n\n\nExponentialfunktion\n\\[e^2\\]\nexp()\nexp(3)\n\n\nLogarithmus\n\\[log_{e}, log_{10}, log_{10}10\\]\nlog(), log10()\nlog(10), log10(10)\n\n\nTrigonometrische Funktionen\n\\[cos, sin, tan\\]\ncos(), sin(), tan()\ncos(2), sin(2), tan(2)\n\n\n\n\n\n Konsole Tipp Lösung\n\n\nGeben Sie in die Konsole folgende mathematische Operationen ein:\n\n\\(1+1+1\\)\n\\(5*5\\)\n\\(3*(4+3)\\)\n\\(1000/10^2\\)\n\\(\\sqrt{144}\\)\n\\(\\sin60\\)\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSchauen Sie in der untenstehenden Tabelle Mathematische Operatoren in R nach.\n\n\n\n\n[1] 3\n\n\n[1] 25\n\n\n[1] 21\n\n\n[1] 10\n\n\n[1] 12\n\n\n[1] -0.3048106\n\n\n\n\n\n\n\n\n\n\n\n3.3.3 Variablen in R\nObjekte können in R erstellt werden indem einer der beiden Zuweisungsoperatoren = oder &lt;- genutzt wird. In diesem Kurs arbeiten wir vor allem mit &lt;-.4 In den meisten Fällen ergibt = jedoch dasselbe Ergebnis.\nVor dem Zuweisungsoperator steht der Variablenname. Nach dem Zuweisungsoperator steht der Variablenwert bzw. die -werte.\n\nEinfache Variablen: Vektoren\nDie simpelsten Objekte in R sind Vektoren. Man kann sich dies vorstellen wie einen Wert (z.B. eine Zelle) oder eine Reihe von Werten (z.B. eine Spalte) einer Exceltabelle. Ein Vektor kann keinen, einen oder mehrere Werte enthalten. Matrizen können mehrere Vektoren desselben Datentyps kombinieren (z.B. mehrere Spalten in einer Exceltabelle). Datensätze (data.frame oder tibble) können Variablen unterschiedlicher Typen kombinieren. Es können also Buchstaben und Zahlen gemischt werden.\nEine neue Variable kann mit einem Zuweisungsoperator erstellt werden.\nHier ein paar Beispiele:\n\na &lt;- 5 # Variable namens a mit dem Wert 5\nb = 5 # Variable namens b mit dem Wert 5\nc &lt;- 6.45 # Variable namens c mit dem Wert 6.45\nd &lt;- 5*3 # Variable namens d mit dem Wert ?\n\nFür das Erstellen der Variable muss der Code nicht nur geschrieben, sondern auch ausgeführt werden. Durch das Ausführen wird dem Objektnamen a den Wert 5 zugewiesen. Variablen können abgerufen werden, indem ihr Name eingegeben und ausgeführt wird:\n\na\n\n[1] 5\n\n\nDiese Variable bleibt gespeichert/abrufbar, bis das Environment wieder gelöscht wird. Sie kann auch überschrieben werden.\n\na &lt;- 10\na\n\n[1] 10\n\n\n\n Konsole Tipp Lösung\n\n\n\nErstellen Sie die obigen Variablen a,b, c und d.\nRufen Sie die Variablen auf: Was haben Sie für Werte?\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSetzen Sie vor dem Pfeil den Variablennamen ein.\nSetzen Sie nach dem Pfeil den Variablenwert ein.\nDrücken Sie Run Code.\n\n\n\na &lt;- 5\nb &lt;- 5\nc &lt;- 6.45\nd &lt;- 5*3\n\n\n\n\nWird eine Variable aufgerufen, die nicht existiert, wird die Fehlermeldung Error: object 'x' not found ausgegeben. Das bedeutet, dass die Variable x nicht auffindbar ist und daher nicht angezeigt werden kann.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\nVariablen können auch mehrere Werte enthalten. Einen Weg mehrere Werte in einer Variable zu speichern ist die Funktion c() zu nutzen.5 Die Variable y &lt;- c(23, 45, 34) enthält die Werte 23, 45 und 34. Nicht numerische Werte, z.B. Wörter, werden jeweils in \"Anführungszeichen\" gesetzt: z &lt;- c(\"ja\", \"nein\", \"vielleicht\").\n\nFaktoren können mit der Funktion as.factor() erstellt werden. Wenn z.B. ja, nein und vielleicht als Faktoren gespeichert werden sollen lautet der Code z &lt;- as.factor(c(\"ja\", \"nein\", \"vielleicht\")).\n\n\n Konsole Tipp Lösung\n\n\nErstellen Sie eine Variable mit mehreren numerischen Werten und eine Variable mit mehreren Wörtern als Werte.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFügen Sie in die Klammer mehrere Werte ein. Numerische Werte/Zahlen können einfach eingegeben werden. Kategorische Werte/Wörter hingegen müssen in Anführungszeichen (\" \") gesetzt werden.\nDrücken Sie Run Code.\n\n\n\nnumbers &lt;- c(23, 45, 34)\nwords &lt;- c(\"ja\", \"nein\", \"vielleicht\")\n\n\n\n\nVariablen können unterschiedliche Datentypen enthalten, z.B. Zahlen oder Wörter. Der Variablentyp (oder die Variablenklasse) entspricht dem zugewiesenen Wert bzw. den zugewiesenen Werten. Mit der Funktion class() kann erfragt werden, welchen Variablentyp eine Variable hat. In die Klammer wird der Variablennamen, also bspw. y eingesetzt.\n\n Konsole Tipp Lösung\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nDefinieren Sie eine Variable y.\nFügen Sie in die Klammer nach class den Variablennamen ein.\nSie können y &lt;- ... der nächsten Aufgabe kopieren und hier einsetzen, um sich den Variablentyp ausgeben zu lassen.\n\n\n\ny &lt;- c(23, 45, 34)\nclass(y)\n\n[1] \"numeric\"\n\n\n\n\n\n\n\n\n\n\n\n Quiz: Variablentyp\n\n\n\n\nWelcher Variablentyp hat die Variable y?\na.\ny &lt;- c(23, 34, 634, 234, 12, 34)\ncharacternumericfactorleer\nb.\ny &lt;- c(\"hallo\", \"a\", \"nein\")\ncharacternumericfactorleer\nc.\ny &lt;- 0\ncharacternumericfactorleer\nd.\ny &lt;- NULL\ncharacternumericfactorleer\ne.\ny &lt;- as.factor(c(\"blue\", \"red\", \"yellow\"))\ncharacternumericfactorleer\n\n\n\n\n\n\n3.3.4 Datensätze\nObjekte können nicht nur einen Vektor enthalten wie oben, sondern können auch ganze Datensätze sein. Also mehrere aneinandergereihte Vektoren (wie eine Exceltabelle). Datensätze können unterschiedliche Variablentypen enthalten.\n\n Konsole Tipp Lösung\n\n\nErstellen Sie einen Datensatz mit 3 Variablen:\n\nName: sub, Werte: sub-01, sub-02, sub-03, sub-04\nAlter: age, Werte: 43, 54, 33, 29\nKorrekte Antworten: accuracy, Werte: 89, 77, 95, 98\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFügen Sie bei allen ___ die fehlenden Werte ein und drücken Sie Run Code.\n\n\n\nd &lt;- tibble(sub = c(\"sub-01\", \"sub-02\", \"sub-03\", \"sub-04\"),\n            age = c(43, 54, 33, 29),\n            accuracy = c(89, 77, 95, 98)\n            )\n\n\n\n\nZusammenfassend können Variablen keinen, mehrere oder einen Wert haben. Sie können unterschiedliche oder identische Datentypen beinhalten.\n\n\n\n\n\n\n\n3.3.5 Funktionen und Argumente\nFunktionen sind Befehle, die etwas ausführen. Um dies zu tun, wird der Funktionsname und in den Klammern die Argumente angegeben. Bei jeder Funktion ist definiert, ob und wenn ja welche Argumente eingegeben werden müssen. Hierbei gibt es Argumente die unbedingt benötigt werden, und solche, die weggelassen werden können, dann werden die Standardeinstellungen genommen.\nBeispiele für Funktionen\nDie Funktion mean()berechnet den arithmetischen Mittelwert. In der Dokumentation (also z.B. durch eingeben von ?mean() wird angegeben, dass mean() mindestens ein Argument benötigt, nämlich ein Objekt mit Zahlen darin oder mehrere Zahlen: mean(x, …)`.\nmean() kann also mit einzelnen Zahlen als Argument verwendet werden:\n\nmean(100, 88, 115, 102, 104, 96, 85, 112, 98)\n\n[1] 100\n\n\nOder wir können mit der Funktion c() einen numerischen Vektor erstellen, und dann diesen Vektor als Argument verwenden:\n\n# mean with a numeric vector\niq &lt;- c(100, 88, 115, 102, 104, 96, 85, 112, 98)\nmean(iq)\n\n[1] 100\n\n\n\n Konsole Tipp Lösung\n\n\nBerechnen Sie den arithmetischen Mittelwert von\n346, 56, 23, 85, 234, 8, 4, 812, 34\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nErstellen Sie zuerst mit c() einen numerischen Vektor.\nRufen Sie dann die Funktion mean() mit diesem Vektor als Argument auf.\n\n\n\nnum_var &lt;- c(346, 56, 23, 85, 234, 8, 4, 812, 34)\nmean(num_var)\n\n[1] 178\n\n\n\n\n\nWichtige Funktionen für statistische Berechnungen:\n\nmean(): berechnet den Mittelwert\nmedian(): berechnet den Median\nsd(): berechnet die Standardabweichung\nsum(): berechnet die Summe\nmin(): extrahiert den kleinsten Wert\nmax(): extrahiert den grössten Wert \n\n\n\n\n\n\n\n Quiz: Funktionen nutzen\n\n\n\n\nDieser Code erstellt einen Variable mit 100 fiktiven IQ-Messungen.\n\ndata_iq &lt;- rnorm(100, mean = 100, sd = 15) # diese Zeile generiert 100 Messungen\n\nVerwenden Sie die Konsole, um die Variable data_iq zu erstellen mit dem obigen Code. Danach können Sie die Funktionen von oben nutzen um das Quiz zu beantworten.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\na. Was ist der Mittelwert der Daten?\nca. 50ca. 100ca. 1000\nb. Was ist der Median der Daten?\nca. 10ca. 50ca. 100\nc. Was ist die Standardabweichung der Daten?\nca. 15ca. 50ca. 100\nd. Was ist die der maximale Wert? (keine Quiz-Antwort möglich da Werte unterschiedlich)\ne. Was ist der minimale Wert? (keine Quiz-Antwort möglich da Werte unterschiedlich)\n\n\n\nAlles hinter dem # wird nicht ausgeführt, es dient als Kommentar. So kann beschrieben werden, was eine Zeile Code genau macht, ohne dass diese mit dem Code interferiert.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics Programmieren</span>"
    ]
  },
  {
    "objectID": "r/programmieren.html#data-wrangling",
    "href": "r/programmieren.html#data-wrangling",
    "title": "3  Basics Programmieren",
    "section": "3.4 Data wrangling",
    "text": "3.4 Data wrangling\nDatensätze können in R einfach dargestellt und zusammengefasst werden.\nMit der Funktion glimpse() kann der Datensatz angeschaut werden\n\n Konsole Tipp Lösung\n\n\nSchauen Sie sich den oben erstellten Datensatz an.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nFalls d nicht angezeigt werden kann, erscheint die Fehlermeldung Error: object 'd' not found. Scrollen Sie nach oben und erstellen Sie den Datensatz dunter 3. Objekte in R.\nDrücken Sie Run Code.\n\n\n\nglimpse(d)\n\nRows: 4\nColumns: 3\n$ sub      &lt;chr&gt; \"sub-01\", \"sub-02\", \"sub-03\", \"sub-04\"\n$ age      &lt;dbl&gt; 43, 54, 33, 29\n$ accuracy &lt;dbl&gt; 89, 77, 95, 98\n\n\n\n\n\nZum Üben gibt es in R Datensätze, die immer verfügbar sind, z.B. cars. In diesem Datensatz von 1920 werden verschiedene Autos und ihre Eigenschaften beschrieben.\nMit summary() kann der Datensatz zusammengefasst werden, es werden automatisch die minimalen und maximalen Werte, Mittelwerte, etc. ausgegeben.\n\n Konsole Tipp Lösung\n\n\nSchauen Sie sich die Zusammenfassung von cars an:\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nVerwenden Sie die Funktion summary().\nDrücken Sie Run Code.\n\n\n\nsummary(cars)\n\n     speed           dist       \n Min.   : 4.0   Min.   :  2.00  \n 1st Qu.:12.0   1st Qu.: 26.00  \n Median :15.0   Median : 36.00  \n Mean   :15.4   Mean   : 42.98  \n 3rd Qu.:19.0   3rd Qu.: 56.00  \n Max.   :25.0   Max.   :120.00  \n\n\n\n\n\nMit dem Operator $ kann eine einzelne Variable aus dem Datensatz ausgewählt werden.\n\n Konsole Tipp Lösung\n\n\nSchauen Sie sich die einzelnen Variablen von cars an.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWählen Sie aus den oben angezeigten Variablen eine aus und setzen Sie sie nach dem $ ein.\nBeispiel: speed oder dist.\nDrücken Sie Run Code.\n\n\n\ncars$speed\n\n [1]  4  4  7  7  8  9 10 10 10 11 11 12 12 12 12 13 13 13 13 14 14 14 14 15 15\n[26] 15 16 16 17 17 17 18 18 18 18 19 19 19 20 20 20 20 20 22 23 24 24 24 24 25\n\n\noder\n\ncars$dist\n\n [1]   2  10   4  22  16  10  18  26  34  17  28  14  20  24  28  26  34  34  46\n[20]  26  36  60  80  20  26  54  32  40  32  40  50  42  56  76  84  36  46  68\n[39]  32  48  52  56  64  66  54  70  92  93 120  85",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics Programmieren</span>"
    ]
  },
  {
    "objectID": "r/programmieren.html#datenvisualisieren",
    "href": "r/programmieren.html#datenvisualisieren",
    "title": "3  Basics Programmieren",
    "section": "3.5 Datenvisualisieren",
    "text": "3.5 Datenvisualisieren\nUm Grafiken zu erstellen gibt es in R einfache Befehle, wie\n\nplot()\nhist()\nboxplot()\n\n\nKomplexere und grafisch ansprechendere Plots können mit dem Package {ggplot2} erstellt werden. Cheatsheet für Interessierte\n\nIn die Grafikfunktionen können teilweise ganze Datensätze als Argument eingegeben werden. Meistens brauchen die Funktionen aber die genauen Variablen, die geplottet werden sollen als Argumente. Die einzelnen Variablen können mit dem $ spezifiziert werden (z.B. cars$speed).\n\n3.5.1 Scatterplot\nDie Funktion plot() macht einen Scatterplot, zeichnet also immer die ersten beiden Werte zweier Variablen als Punkt. Dann die zweiten zwei Werte, usw.\n\n Konsole Tipp Lösung\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSetzen Sie den Namen des Datensatzes (z.B.cars) ein.\nDrücken Sie Run Code.\n\n\n\nplot(cars)\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.2 Histogramme\nDie Funktion hist() erstellt ein Histogramm. Dafür wird nur eine Variable benötigt. Es wird die Häufigkeit eines Werts in dieser Variable abgetragen.\n\n Konsole Tipp Lösung\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSetzen Sie den Namen des Datensatzes (z.B.cars) ein. Setzen Sie hinter dem $ einen Variablennamen ein.\nDrücken Sie Run Code.\n\n\n\nhist(cars$speed)\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.5.3 Boxplots\nDie Funktion boxplot() erstellt ein Boxplot, mit Median und der 1. und 3. Quartile. Dafür wird nur eine Variable benötigt. Es kann aber auch ein Datensatz mit mehreren Variablen eingegeben werden. Dann werden mehrere Boxen geplottet.\n\n Konsole Tipp Lösung\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nSetzen Sie den Namen des Datensatzes (z.B.cars) ein. Setzen Sie hinter dem $ einen Variablennamen ein um nur eine Variable zu plotten.\nDrücken Sie Run Code.\n\n\n\nboxplot(cars)",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics Programmieren</span>"
    ]
  },
  {
    "objectID": "r/programmieren.html#footnotes",
    "href": "r/programmieren.html#footnotes",
    "title": "3  Basics Programmieren",
    "section": "",
    "text": "https://www.unilu.ch/studium/studienangebot/bachelor/vpf/psychologie/↩︎\nChambers, J.M.(2014): Object-Oriented Programming, Functional Programming and R. In: Statistical Science. Band 29, Nr. 2, S. 167–180, https://arxiv.org/abs/1409.3531↩︎\nauch Funktionen sind Objekte, was anfangs irritierend wirken kann, ist eigentlich recht logisch; als Analogie: auch wenn der Rechner ein Objekt ist, kann damit gerechnet werden (Funktionsaufruf).↩︎\nDer Zuweisungsoperator &lt;- zeigt klarer als das = auf, dass ein Wert zugewiesen wird und ist daher intuitiver.↩︎\nc() ist wie die Plastikumhüllung für vier Tetrapack Milch. Sie fasst einfach mehrere Werte zusammen und zeigt R, dass diese in eine Variable gehören. So können 4 Werte mit einem “Henkel” (Variablennamen) herumgetragen werden.↩︎",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Basics Programmieren</span>"
    ]
  },
  {
    "objectID": "r/help.html",
    "href": "r/help.html",
    "title": "4  Help center",
    "section": "",
    "text": "4.1 Hilfe in R",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Help center</span>"
    ]
  },
  {
    "objectID": "r/help.html#hilfe-in-r",
    "href": "r/help.html#hilfe-in-r",
    "title": "4  Help center",
    "section": "",
    "text": "4.1.1 ?\nUm zu erfahren, was genau eine Funktion macht und welche Argumente sie benötigt, kann die leere Funktion mit einem Fragezeichen aufgerufen werden: ?cor().\n\n Konsole Tipp Lösung\n\n\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nWählen Sie eine Funktion aus und setzen Sie vorher ein ? ein.\nDrücken Sie Run Code.\n\n\n\n?cor()\n\nstarting httpd help server ... done\n\n\n\n\n\n\n\n4.1.2 HelpFenster in RStudio\nIm rechten unteren Quadranten finden Sie einen Reiter namens Help. Dort können Sie Namen von Packages oder Funktionen eingeben um zur Dokumentation zu gelangen.\n\n\n4.1.3 Autocomplete mit TabTab\nMit der Taste TabTab können Sie schauen, welche Vorschläge R Ihnen macht. So sehen Sie z.B. welche Argumente eine Funktion benötigt.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Help center</span>"
    ]
  },
  {
    "objectID": "r/help.html#bücher-und-tutorials",
    "href": "r/help.html#bücher-und-tutorials",
    "title": "4  Help center",
    "section": "4.2 Bücher und Tutorials",
    "text": "4.2 Bücher und Tutorials\nSehr geeignete Bücher und Websites sind im Folgenden aufgelistet. Der Vorteil dieser Quellen im Vergleich zu Suchmaschinen oder LLMs ist, dass die Informationen verifiziert sind.\n\nR for Data Science von Hadley Wickham\nData Skills for Reproducible Research\nIntroduction to R",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Help center</span>"
    ]
  },
  {
    "objectID": "r/help.html#suchmaschinen",
    "href": "r/help.html#suchmaschinen",
    "title": "4  Help center",
    "section": "4.3 Suchmaschinen",
    "text": "4.3 Suchmaschinen\nUm weiterzukommen ist es oft hilfreich Suchmaschinen zu nutzen (Fehlermeldung in Suchmaschine kopieren). Oft hatten andere vorher schon dasselbe Problem.\nSuchmaschinen eignen sich oft für das Beheben von Problemen in dem man z.B.\n\ndie Fehlermeldung kopiert und in einer Suchmaschine eingibt.\ndas Stichwort R und das Ziel (z.B. Zusammenfügen mehrerer Variablen zu einem Datensatz) eingibt (meistens erzielt man bessere Resultate, wenn man das Ziel in Englisch formuliert).\nForen für Programmierprobleme sind beispielsweise StackOverflow oder das Posit-Forum.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Help center</span>"
    ]
  },
  {
    "objectID": "r/help.html#llms",
    "href": "r/help.html#llms",
    "title": "4  Help center",
    "section": "4.4 LLMs",
    "text": "4.4 LLMs\nAuch ChatGPT zu fragen kann hilfreich sein (z.B. “Was bedeutet dieser Code? cor(x,y)”). Natürlich kann die Antwort von ChatGPT immer falsch sein und muss getestet und kritisch überprüft werden1.\nLLMs eignen sich oft zu Beginn nicht schlecht, da sie für “einfache” und “häufige” Probleme besser performen, als für Spezialfälle. Hierbei gilt es einige Punkte zu beachten:\n\nLLMs geben Code aus. Aber auch wenn dieser problemlos ausgeführt werden kann, muss trotzdem genau überprüft werden, ob der Code das richtige tut. Dieses Überprüfen kann unter Umständen genau so lange dauern, wie das Lesen und Verstehen der Dokumentation.\nDas Überprüfen von Code erfordert gewisse Grundkenntnisse. Das direkte Verwenden von Code ohne kompetente Prüfung ist in der Forschung unethisch!\nEs dürfen keine sensiblen Daten eingegeben werden.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Help center</span>"
    ]
  },
  {
    "objectID": "r/help.html#faq",
    "href": "r/help.html#faq",
    "title": "4  Help center",
    "section": "4.5 FAQ",
    "text": "4.5 FAQ\nWelche Werte enthält eine Variable / ein Datensatz?\n\nUm die Werte einer Variable oder eines Datensatzes zu sehen, schauen Sie in unter Environment(rechter oberer Quadrant in _RStudio) nach. Dort können Sie auf den blauen Pfeil klicken und die Infos “ausklappen”.\nGeben Sie den Namen der Variable/des Datensatzes in der Console ein und drücken Sie EnterEnter.\n\nWelche Argumente braucht eine Funktion?\n\nGeben Sie den Funktionsnamen ein und klicken Sie in die folgenden Klammern. Drücken Sie TabTab um Vorschläge zu sehen.\nGeben Sie ?FUNKTIONSNAMEein.\nSuchen Sie im rechten unteren Quadranten von RStudio unter Help nach dem Funktionsnamen.\nGeben Sie in einer Suchmaschine den Funktionsnamen und Stichworte zu Ihrem Ziel ein.\n\nBeim Laden von {tidyverse} gibt es eine Fehlermeldung.\n\nSehr wahrscheinlich ist dies einfach eine Warnung (Warning) und keine Fehlermeldung (Error). Es gibt andere Packages, die dieselben Funktionsnamen verwenden, das kann zu Konflikten führen. Laden Sie trotzdem das {tidyverse}.",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Help center</span>"
    ]
  },
  {
    "objectID": "r/help.html#footnotes",
    "href": "r/help.html#footnotes",
    "title": "4  Help center",
    "section": "",
    "text": "↩︎",
    "crumbs": [
      "R und RStudio",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Help center</span>"
    ]
  },
  {
    "objectID": "datenverarbeitung/workflow.html#footnotes",
    "href": "datenverarbeitung/workflow.html#footnotes",
    "title": "5  Workflow",
    "section": "",
    "text": "Wickham, H., Çetinkaya-Rundel, M., Grolemund, G. (2025). R for Data Science (2e). https://r4ds.hadley.nz↩︎",
    "crumbs": [
      "Datenverarbeitung",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "datenverarbeitung/readandwrite.html",
    "href": "datenverarbeitung/readandwrite.html",
    "title": "6  Datensätze einlesen und schreiben",
    "section": "",
    "text": "6.1 Einlesen mit dem GUI\nIm rechten oberen Quadranten unter dem Reiter Environment findet sich die Fläche Import Datset. Hier muss ausgewählt werden, welches Dateiformat der Datensatz hat. Danach können weitere Einstellungen vorgenommen werden, wie z.B. - soll die oberste Zeile als Variablennamen erkannt werden? - welche Trennzeichen (separators oder delimiters) sollen verwendet werden (z.B. ,) etc.\nDieses Vorgehen hat drei Vorteile:",
    "crumbs": [
      "Datenverarbeitung",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Datensätze einlesen und schreiben</span>"
    ]
  },
  {
    "objectID": "datenverarbeitung/readandwrite.html#einlesen-mit-dem-gui",
    "href": "datenverarbeitung/readandwrite.html#einlesen-mit-dem-gui",
    "title": "6  Datensätze einlesen und schreiben",
    "section": "",
    "text": "Die Funktion zum Einlesen muss nicht bekannt sein, RStudio übernimmt das.\nEine Direktansicht zeigt, wie der Datensatz mit den vorgenommenen Einstellungen aussehen würde.\nRStudio gibt zum Schluss automatisch Code aus, welcher verwendet wurde. Dieser kann für zukünftiges Einlesen dieses Datensatzes verwendet werden.",
    "crumbs": [
      "Datenverarbeitung",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Datensätze einlesen und schreiben</span>"
    ]
  },
  {
    "objectID": "datenverarbeitung/readandwrite.html#einlesen-mit-code",
    "href": "datenverarbeitung/readandwrite.html#einlesen-mit-code",
    "title": "6  Datensätze einlesen und schreiben",
    "section": "6.2 Einlesen mit Code",
    "text": "6.2 Einlesen mit Code\nDas Einlesen eines Datensatzes mit Code eignet sich vor allem für das Automatisieren des Vorgangs. Mit Code muss nicht jedesmal im GUI angeklickt werden wie der Datensatz eingelesen werden soll, sondern wird automatisch immer gleich und mit wenig Aufwand geladen.\n\n6.2.1 Einlesen eines .csv-Files\n\n# Einlesen eines .csv-Files\nnew_csv_data &lt;- read.csv(\"data/nameoftheCSVfile.csv\")\n\nWeitere Einstellungen:\n\nheader = FALSE: die oberste Zeile wird nicht als Variablennamen eingelesen (Standardeinstellung header = TRUE)\nsep = \";\": ein Semikolon wird als Zellentrennungszeichen angenommen (Standardeinstellung sep = \",\")\n\n\n\n6.2.2 Einlesen eines .xlsx-Files\n\n# Einlesen eines .xlsx-Files\nlibrary(readxl)\nnew_xlsx_data &lt;- read_xlsx(\"data/nameoftheEXCELfile.xlsx\")\n\nWeitere Einstellungen:\n\ncol_names = FALSE: die oberste Zeile wird nicht als Variablennamen eingelesen (Standardeinstellung col_names = TRUE)\n\n\n\n6.2.3 Funktionen zum Einlesen von Datensätzen\n\nEinlesen von Datensätzen\n\n\n\n\n\n\n\n\n\nDateiformat\nImport Dataset (GUI)\nCode (Funktion)\nCode (Argumente)\nCode-Beispiel\n\n\n\n\n.csv\nFrom text\nread.csv()\nfile, (header), (sep), …\nread.csv(file = \"data/datafile.csv\")\n\n\n.xlsx\nFrom Excel\nreadxl::read_xlsx()\npath, (sheet), (col_names), …\nreadxl::read_xlsx(path = \"data/datafile.xlsx\")\n\n\n.sav\nFrom SPSS\nhaven::read_sav()\nfile, …\nhaven::read_sav(file = \"data/datafile.sav\")\n\n\n.txt\nFrom text\nread.delim()\nfile, (delim), (col_names)\nread_delim(file = \"data/datafile.txt\")\n\n\n.sas7bdat\nFrom SAS\n…\n\n\n\n\n.dta\nFrom Stata\n…",
    "crumbs": [
      "Datenverarbeitung",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Datensätze einlesen und schreiben</span>"
    ]
  },
  {
    "objectID": "uebungen/uebungen.html",
    "href": "uebungen/uebungen.html",
    "title": "Informationen",
    "section": "",
    "text": "Dieses Kapitel enthält die Übungsmaterialien begleitend zur Vorlesung.\nTutoriat in den Übungsgruppen\nDie Aufgaben werden in den Übungsgruppen mit Tutoriat gemeinsam bearbeitet.\nArbeiten mit RProjekten \nErstellen Sie immer zuerst ein RProjekt für die Übung bevor Sie mit den Aufgaben beginnen und benennen Sie dieses Projekt z.B. nach der Übung: Uebung_7).\nTeilweise erhalten Sie für eine oder mehrere Übungen einen vorgefertigten Projekt-Ordner. Achtung: Ordner müssen vor dem Bearbeiten entzippt werden.\nDatensätze\nDie für die Übungen verwendeten Datensätze können am Anfang der Übungen per Link heruntergeladen werden.",
    "crumbs": [
      "Übungen",
      "Informationen"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html",
    "href": "uebungen/uebung-01.html",
    "title": "Übung 1",
    "section": "",
    "text": "Aufgabe 1.1. Installation von R und RStudio\nInstallieren Sie R und RStudio, wie in 1  Installation beschrieben.",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html#aufgabe-1.2-packages-installieren",
    "href": "uebungen/uebung-01.html#aufgabe-1.2-packages-installieren",
    "title": "Übung 1",
    "section": "Aufgabe 1.2 Packages installieren",
    "text": "Aufgabe 1.2 Packages installieren\nInstallieren Sie das Package {tidyverse} entweder über die Konsole oder über Tools.",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html#aufgabe-1.3-rproject-und-rskript-erstellen",
    "href": "uebungen/uebung-01.html#aufgabe-1.3-rproject-und-rskript-erstellen",
    "title": "Übung 1",
    "section": "Aufgabe 1.3: RProject und RSkript erstellen",
    "text": "Aufgabe 1.3: RProject und RSkript erstellen\n\nErstellen Sie (an einem für Sie geeigneten Ort auf Ihrem Rechner) einen Ordner für alle Übungen in Statistik 2 mit dem Namen Statistik2. \nÖffnen Sie RStudio und erstellen Sie in diesem Ordner ein RProject mit dem Namen introduction_to_r.\nErstellen Sie in RStudio ein RSkript (Endung .R).\nSpeichern Sie dieses Skript im RProjekt-Ordner mit dem Namen introskript ab.\nErstellen Sie im aktuellen RProjekt-Ordner einen Unterordner namens data. Laden Sie dann die Datensätze herunter und speichern Sie diese im data-Ordner.\n\nDatensatz 1\nDatensatz 2",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html#aufgabe-1.4-operatoren-und-funktionen-verwenden",
    "href": "uebungen/uebung-01.html#aufgabe-1.4-operatoren-und-funktionen-verwenden",
    "title": "Übung 1",
    "section": "Aufgabe 1.4: Operatoren und Funktionen verwenden",
    "text": "Aufgabe 1.4: Operatoren und Funktionen verwenden\n\nSchreiben Sie in das Skript untenstehenden Code und führen Sie diesen aus.\n\n\nlibrary(tidyverse)\nnumbers &lt;- c(43, 65, 23, 78, 34, 73, 69, 14, 37, 84)\n\nWie können Sie nun nachschauen, welche Werte in der Variable vorhanden sind?\n\nBerechnen Sie folgende Werte:\n\nMittelwert der Variable numbers.\nStandardabweichung der Variable numbers.\nSumme der Variable numbers\nWas passiert, wenn Sie die Variable numbers mit sich selber addieren (numbers + numbers) oder multiplizieren?\nWas passiert, wenn Sie die Wurzel nehmen?\n\nErstellen Sie eine Variable words mit den Wörtern yellow, green und red darin.\n\nWas passiert, wenn Sie den Mittelwert der Variable words berechnen?\nWelcher Wert wird ausgegeben?\nGibt es eine Warnung oder eine Fehlermeldung?\n\nWas passiert, wenn Sie die Variable words mit sich selber addieren?\n\nWelcher Wert wird ausgegeben?\nGibt es eine Warnung oder eine Fehlermeldung?\n\nDiskutieren Sie kurz zusammen: Wie unterscheiden sich Warnungen von Fehlermeldungen?",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html#aufgabe-1.5-rnotebook-erstellen-und-packages-laden",
    "href": "uebungen/uebung-01.html#aufgabe-1.5-rnotebook-erstellen-und-packages-laden",
    "title": "Übung 1",
    "section": "Aufgabe 1.5: RNotebook erstellen und Packages laden",
    "text": "Aufgabe 1.5: RNotebook erstellen und Packages laden\n\nErstellen Sie ein RNotebook und speichern Sie es unter dem Namen intronotebook ab.\nIdentifizieren Sie die 3 Bausteine eines Notebooks: Header, Textfeld und Codefeld mit folgenden Fragen:\n\nWoran erkennt man den Baustein?\nFür was eignet sich der Baustein besonders und für was nicht?\n\nGeben Sie dem Notebook einen Titel.\nLaden Sie in einem Codefeld das Package {tidyverse} mit\n\n\nlibrary(tidyverse)\n\n\nBeschreiben Sie im Textfeld über dem Codefeld was der Code machen sollte.",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html#aufgabe-1.6-daten-einlesen",
    "href": "uebungen/uebung-01.html#aufgabe-1.6-daten-einlesen",
    "title": "Übung 1",
    "section": "Aufgabe 1.6: Daten einlesen",
    "text": "Aufgabe 1.6: Daten einlesen\nIn dieser Aufgabe arbeiten wir weiter mit dem RNotebook von oben.\n\nErstellen Sie ein neues Codefeld.\nLesen Sie den Datensatz stroop_data_sub-001.csv aus dem data-Ordner ein. Gehen Sie dabei schrittweise vor:\n\nWelche Endungen hat die Datei?\nImportieren Sie die Daten mit dem GUI.\nLöschen Sie die Variable aus dem Environment.\nImportieren Sie den Datensatz mit Code. Verwenden Sie dafür den Variablennamen d1 für den Datensatz (bzw. d2 für den zweiten Datensatz).\n\n\n\nd1 &lt;- ...(\"data/...\")\n\nFühren Sie dieselben Schritte für stroop_data_sub-001.xlsx aus. Denken Sie daran, dass die Einlesefunktion für .xlsx-Dateien aus dem Package {readxl} stammt und sie dieses zuerst laden müssen.\n\nd2 &lt;- ...\n\n\nDiskutieren Sie kurz zusammen:\n\nWas war schwierig? Was fällt Ihnen auf?\nWas sind Separators?\nWelcher Weg fällt Ihnen leichter?",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html#aufgabe-1.7-datensätze-anschauen",
    "href": "uebungen/uebung-01.html#aufgabe-1.7-datensätze-anschauen",
    "title": "Übung 1",
    "section": "Aufgabe 1.7: Datensätze anschauen",
    "text": "Aufgabe 1.7: Datensätze anschauen\nSchauen Sie sich die beiden Datensätze auf vier Arten an:\n\nindem Sie im Environment mit dem Pfeil den Datensatz aufklappen.\nindem Sie im Environment auf den Namen doppelklicken.\nindem Sie den Namen der Variable eingeben (in der Konsole oder im RNotebook).\nindem Sie untenstehenden Code eingeben (... muss mit einer Variable ersetzt werden):\n\n\nglimpse(...)",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "uebungen/uebung-01.html#aufgabe-1.8-visualisieren-der-datensätze",
    "href": "uebungen/uebung-01.html#aufgabe-1.8-visualisieren-der-datensätze",
    "title": "Übung 1",
    "section": "Aufgabe 1.8: Visualisieren der Datensätze",
    "text": "Aufgabe 1.8: Visualisieren der Datensätze\n\nInstallieren Sie das Package {esquisse}. Verwenden Sie hierzu entweder den Reiter Tools&gt; Install Packages... oder ergänzen Sie den untenstehenden Code.\n\n\n# Ergänzen Sie diesen Code und schreiben Sie ihn in die Konsole und NICHT ins RNotebook.\n__(\"esquisse\")\n\nWieso sollte das Package nicht im RNotebook installiert werden?\n\nGeben Sie in der Konsole folgenden Code ein:\n\n\nesquisse::esquisser()\n\n\n\n\n\n\n\nFigure 1: Auswahl des Datensatzes in Equisser\n\n\n\n\nSchauen Sie sich nacheinander die beiden Datensätze an.\n\nWelche Variablen gibt es und welches Skalenniveau haben diese?\nIst die Variable rt normalverteilt?\nWelche Darstellungsform eignet sich am besten?\nLassen Sie sich für die beste Darstellung des Datensatzes einen Code ausgeben.\nSpeichern Sie Ihr RNotebook ab. Speichern Sie alle Änderungen in Ihrem RNotebook. Der Titel sollte nicht mehr in rot geschrieben sein und keinen Stern nach dem Namen haben.\n\n\n\n\n\n\n\n\nFigure 2: Beispiel Equisser\n\n\n\n\nSchliessen Sie Ihr RProject und öffnen Sie es erneut.\nFalls nötig: Öffnen Sie ihr intronotebook.Rmd-File wieder. Dies können Sie unter File &gt; Open File tun oder im rechten unteren Quadranten unter Files.\nFühren Sie Ihren Code mit Run all aus. Jetzt sollten Sie zum Schluss eine Grafik angezeigt erhalten.\nZeigen Sie einander die Grafiken und diskutieren Vor- und Nachteile der Darstellungsformen.\n\n\n\n\n\n\n\nBei Problemen…\n\n\n\nDer Einstieg ins Programmieren mit R ist nicht einfach. Falls Sie Fragen zu den Übungen haben, dürfen Sie diese zusätzlich in der R Sprechstunde nächste Woche stellen. Kommen Sie einfach mit Ihrem Computer vorbei und wir schauen es an.",
    "crumbs": [
      "Übungen",
      "Übung 1"
    ]
  },
  {
    "objectID": "appendix/webrconsole.html",
    "href": "appendix/webrconsole.html",
    "title": "WebR Konsole",
    "section": "",
    "text": "In der WebR-Konsole können Sie R-Code ausführen. Erstellte Variablen werden gespeichert, so lange das Browserfenster nicht geschlossen wird.\n\n Konsole Tipp Lösung\n\n\nGeben Sie hier Code ein.\n\nPlease enable JavaScript to experience the dynamic code cell content on this page.\n\n\nPackages\nLaden Sie zuerst das {tidyverse} mit library(tidyverse).\nDatensätze\nEs stehen Ihnen folgende Datensätze zur Verfügung:\n\ncars\niris\n\nEs können weitere Datensätze durch das Laden von Packages genutzt werden:\n\npenguins aus {palmerpenguins}\n\n\n# Laden vom penguins-Datensatz aus dem {palmerpenguins} Package\nlibrary(palmerpenguins)\nd &lt;- penguins\n\n\n\n\nlibrary(tidyverse)\n\nglimpse(cars)\n\nRows: 50\nColumns: 2\n$ speed &lt;dbl&gt; 4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13…\n$ dist  &lt;dbl&gt; 2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34…\n\nplot(cars)",
    "crumbs": [
      "Anhang",
      "WebR Konsole"
    ]
  },
  {
    "objectID": "appendix/thanks.html",
    "href": "appendix/thanks.html",
    "title": "Danke",
    "section": "",
    "text": "Wir danken folgenden Personen herzlich für ihren Beitrag zu diesem Skript (alphabetische Reihenfolge).",
    "crumbs": [
      "Anhang",
      "Danke"
    ]
  },
  {
    "objectID": "appendix/license.html",
    "href": "appendix/license.html",
    "title": "License",
    "section": "",
    "text": "This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.",
    "crumbs": [
      "Anhang",
      "License"
    ]
  }
]