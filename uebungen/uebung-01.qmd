# Übung 1 {.unnumbered #sec-uebung-01}

::: {.callout-note appearance="default" title="Lernziele dieser Übung"}
Nach der heutigen Übung können Sie

- _R_ und _RStudio_ installieren
- Benutzeroberfläche und Einstellungen in _RStudio_ anpassen
- _RProjekte_ erstellen
- Code in _RNotebooks_ und _RSkripte_ schreiben und ausführen
- Mathematische Operatoren verwenden
- Funktionen mit den passenden Argumenten verwenden
- Variablen verschiedener Typen erstellen und abrufen
- Datensätze einlesen und anschauen
- Daten visualisieren
- Hilfe fürs Debugging finden
:::

::: {.callout-tip appearance="default" title="Übungen ohne RStudio"}
Falls bei der Installation unlösbare Probleme auftauchen, können Sie _R_ und _RStudio_ in der _R Sprechstunde_ nächste Woche installieren. Lösen Sie die Aufgaben ab _Aufgabe 1.4_ mit _WebR_ [hier](../appendix/webrconsole.qmd) und holen Sie _Aufgabe 1.1-1.3_ vor der nächsten Übung nach.
:::

## Aufgabe 1.1. Installation von R und RStudio

Installieren Sie R und RStudio, wie in @sec-installation beschrieben.


## Aufgabe 1.2 Packages installieren

Installieren Sie das _Package_ {tidyverse} entweder über die Konsole oder über `Tools`. 
<!-- ([hier](../r/rrstudio.qmd#packages) finden Sie die Anleitung dazu). -->


## Aufgabe 1.3: RProject und RSkript erstellen

a. Erstellen Sie (an einem für Sie geeigneten Ort auf Ihrem Rechner) einen Ordner für alle Übungen in Statistik 2 mit dem Namen `Statistik2`.
<!-- (oder einem anderen passenden Namen gemäss den [Konventionen](../r/programmingbasics.qmd#namingconventions). -->

b. Öffnen Sie _RStudio_ und erstellen Sie in diesem Ordner ein _RProject_ mit dem Namen `introduction_to_r`.

c. Erstellen Sie in _RStudio_ ein _RSkript_ (Endung `.R`).

d. Speichern Sie dieses Skript im _RProjekt_-Ordner mit dem Namen `introskript` ab.

e. Erstellen Sie im aktuellen _RProjekt_-Ordner einen Unterordner namens `data`. Laden Sie dann die Datensätze herunter und speichern Sie diese im `data`-Ordner.

    - [Datensatz 1](../data/stroop_data_sub-001.csv)
    - [Datensatz 2](../data/stroop_data_sub-001.xlsx)

## Aufgabe 1.4: Operatoren und Funktionen verwenden

a. Schreiben Sie in das Skript untenstehenden Code und führen Sie diesen aus.

```{r}
#| eval: false
library(tidyverse)
numbers <- c(43, 65, 23, 78, 34, 73, 69, 14, 37, 84)
```

Wie können Sie nun nachschauen, welche Werte in der Variable vorhanden sind?

b. Berechnen Sie folgende Werte:

    - Mittelwert der Variable `numbers`.

    - Standardabweichung der Variable `numbers`.

    - Summe der Variable `numbers`

    - Was passiert, wenn Sie die Variable `numbers` mit sich selber addieren (`numbers + numbers`) oder multiplizieren?

    - Was passiert, wenn Sie die Wurzel nehmen?


c. Erstellen Sie eine Variable `words` mit den Wörtern `yellow`, `green` und `red` darin.

    - Was passiert, wenn Sie den Mittelwert der Variable `words` berechnen?
  
    - Welcher Wert wird ausgegeben?
  
    - Gibt es eine Warnung oder eine Fehlermeldung?


d. Was passiert, wenn Sie die Variable `words` mit sich selber addieren?

    - Welcher Wert wird ausgegeben?

    - Gibt es eine Warnung oder eine Fehlermeldung?


e. Diskutieren Sie kurz zusammen: Wie unterscheiden sich Warnungen von Fehlermeldungen?


## Aufgabe 1.5: RNotebook erstellen und Packages laden

a. Erstellen Sie ein _RNotebook_ und speichern Sie es unter dem Namen `intronotebook` ab.

b. Identifizieren Sie die 3 Bausteine eines Notebooks: Header, Textfeld und Codefeld mit folgenden Fragen:

    - Woran erkennt man den Baustein?
    - Für was eignet sich der Baustein besonders und für was nicht?

c. Geben Sie dem Notebook einen Titel.

d. Laden Sie in einem Codefeld das _Package_ `{tidyverse}` mit 

```{r}
#| eval: false
library(tidyverse)
```

e. Beschreiben Sie im Textfeld über dem Codefeld was der Code machen sollte.


## Aufgabe 1.6: Daten einlesen

In dieser Aufgabe arbeiten wir weiter mit dem _RNotebook_ von oben.

a. Erstellen Sie ein neues Codefeld.

b. Lesen Sie den Datensatz `stroop_data_sub-001.csv` aus dem `data`-Ordner ein. Gehen Sie dabei schrittweise vor:

    - Welche Endungen hat die Datei?

    - Importieren Sie die Daten mit dem GUI. 

    - Löschen Sie die Variable aus dem Environment.

    - Importieren Sie den Datensatz mit Code. Verwenden Sie dafür den Variablennamen `d1` für den Datensatz (bzw. `d2` für den zweiten Datensatz).

```{r}
#| eval: false
d1 <- ...("data/...")
```

Führen Sie dieselben Schritte für `stroop_data_sub-001.xlsx` aus.
Denken Sie daran, dass die Einlesefunktion für `.xlsx`-Dateien aus dem Package {readxl} stammt und sie dieses zuerst laden müssen.

```{r}
#| eval: false
d2 <- ...
```

d. Diskutieren Sie kurz zusammen: 

    - Was war schwierig? Was fällt Ihnen auf?
    - Was sind Separators?
    - Welcher Weg fällt Ihnen leichter?


## Aufgabe 1.7: Datensätze anschauen

Schauen Sie sich die beiden Datensätze auf vier Arten an: 

a. indem Sie im `Environment` mit dem Pfeil den Datensatz aufklappen.

b. indem Sie im `Environment` auf den Namen doppelklicken.

c. indem Sie den Namen der Variable eingeben (in der Konsole oder im _RNotebook_). 

d. indem Sie untenstehenden Code eingeben (`...` muss mit einer Variable ersetzt werden):

```{r}
#| eval: false
glimpse(...)
```

## Aufgabe 1.8: Visualisieren der Datensätze

a. Installieren Sie das _Package_ {esquisse}. Verwenden Sie hierzu entweder den Reiter `Tools`> `Install Packages...` oder ergänzen Sie den untenstehenden Code. 

```{r}
#| eval: false
# Ergänzen Sie diesen Code und schreiben Sie ihn in die Konsole und NICHT ins RNotebook.
__("esquisse")
```

Wieso sollte das Package nicht im _RNotebook_ installiert werden?

b. Geben Sie in der Konsole folgenden Code ein:

```{r}
#| eval: false
esquisse::esquisser()
```

![Auswahl des Datensatzes in `Equisser`](../imgs/esquisser.png){#fig-esquisse fig-align="left" width=80%}

c. Schauen Sie sich nacheinander die beiden Datensätze an.

    - Welche Variablen gibt es und welches Skalenniveau haben diese?

    - Ist die Variable `rt` normalverteilt?

    - Welche Darstellungsform eignet sich am besten?

    - Lassen Sie sich für die beste Darstellung des Datensatzes einen Code ausgeben.

    - Speichern Sie Ihr _RNotebook_ ab. Speichern Sie alle Änderungen in Ihrem _RNotebook_. Der Titel sollte nicht mehr in rot geschrieben sein und keinen Stern nach dem Namen haben.
    
![Beispiel `Equisser`](../imgs/esquisser2.png){#fig-esquisse2 fig-align="left" width=80%}

d. Schliessen Sie Ihr _RProject_ und öffnen Sie es erneut.

e. Falls nötig: Öffnen Sie ihr `intronotebook.Rmd`-File wieder. Dies können Sie unter `File` > `Open File` tun oder im rechten unteren Quadranten unter `Files`.


f. Führen Sie Ihren Code mit `Run all` aus. Jetzt sollten Sie zum Schluss eine Grafik angezeigt erhalten.


g. Zeigen Sie einander die Grafiken und diskutieren Vor- und Nachteile der Darstellungsformen.

::: {.callout-tip appearance="default" title="Bei Problemen..."}
Der Einstieg ins Programmieren mit _R_ ist nicht einfach. Falls Sie Fragen zu den Übungen haben, dürfen Sie diese zusätzlich in der _R Sprechstunde_ nächste Woche stellen. Kommen Sie einfach mit Ihrem Computer vorbei und wir schauen es an.
:::
